{"env_info": "sys.platform: linux\nPython: 3.9.15 (main, Nov 24 2022, 14:31:59) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA RTX A4000\nCUDA_HOME: /opt/anaconda3\nNVCC: Cuda compilation tools, release 11.7, V11.7.99\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.13.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.7\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.5\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.0\nOpenCV: 4.6.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.7\nMMDetection: 2.26.0+", "config": "model = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.5),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=300)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[25.526, 0.386, 52.85], std=[53.347, 9.402, 53.172], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n    dict(\n        type='RandomFlip',\n        flip_ratio=0.5,\n        direction=['horizontal', 'vertical']),\n    dict(\n        type='Normalize',\n        mean=[25.526, 0.386, 52.85],\n        std=[53.347, 9.402, 53.172],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1020, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=5,\n    workers_per_gpu=1,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/share/NAS/Benz_Cell/cellLabel-main/Coco_File/Cell_TrainNuc_April.json',\n        img_prefix='/share/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('object', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/share/NAS/Benz_Cell/cellLabel-main/Coco_File/Cell_TestNuc_April.json',\n        img_prefix='/share/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('object', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/share/NAS/Benz_Cell/cellLabel-main/Coco_File/Cell_TestNuc_April.json',\n        img_prefix='/share/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('object', )))\nevaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP')\noptimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=30)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained_models/faster_rcnn_r50_fpn_2x_coco_bbox_mAP-0.384_20200504_210434-a5d8aa15.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('object', )\nimg_scale = (1020, 768)\nbase = '/share/NAS/Benz_Cell/cellLabel-main/'\ndevice = 'cuda'\nwork_dir = './work_dirs/New_OCT/FasterRCNN_R101_CellNuc'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1943077327, "exp_name": "faster_rcnn_r101_CellNucNo.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00099, "memory": 9858, "data_time": 0.02893, "loss_rpn_cls": 0.11092, "loss_rpn_bbox": 0.09377, "loss_cls": 0.33922, "acc": 82.46484, "loss_bbox": 0.48719, "loss": 1.03111, "time": 0.68706}
{"mode": "val", "epoch": 1, "iter": 312, "lr": 0.00177, "bbox_mAP": 0.746, "bbox_mAP_50": 0.976, "bbox_mAP_75": 0.93, "bbox_mAP_s": 0.531, "bbox_mAP_m": 0.82, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.746 0.976 0.930 0.531 0.820 -1.000"}
{"mode": "val", "epoch": 1, "iter": 63, "lr": 0.00177, "memory": 9858, "data_time": 0.04242, "loss_rpn_cls": 0.01107, "loss_rpn_bbox": 0.05693, "loss_cls": 0.10975, "acc": 95.59896, "loss_bbox": 0.18499, "loss": 0.36275, "time": 0.32871}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00277, "memory": 9858, "data_time": 0.02931, "loss_rpn_cls": 0.00808, "loss_rpn_bbox": 0.0549, "loss_cls": 0.09895, "acc": 96.00898, "loss_bbox": 0.17069, "loss": 0.33262, "time": 0.67735}
{"mode": "val", "epoch": 2, "iter": 312, "lr": 0.00355, "bbox_mAP": 0.758, "bbox_mAP_50": 0.977, "bbox_mAP_75": 0.942, "bbox_mAP_s": 0.585, "bbox_mAP_m": 0.834, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.758 0.977 0.942 0.585 0.834 -1.000"}
{"mode": "val", "epoch": 2, "iter": 63, "lr": 0.00355, "memory": 9858, "data_time": 0.04284, "loss_rpn_cls": 0.01071, "loss_rpn_bbox": 0.05307, "loss_cls": 0.08555, "acc": 96.63938, "loss_bbox": 0.16432, "loss": 0.31365, "time": 0.32938}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00455, "memory": 9858, "data_time": 0.02953, "loss_rpn_cls": 0.00703, "loss_rpn_bbox": 0.05393, "loss_cls": 0.08464, "acc": 96.59102, "loss_bbox": 0.16511, "loss": 0.31071, "time": 0.67967}
{"mode": "val", "epoch": 3, "iter": 312, "lr": 0.005, "bbox_mAP": 0.761, "bbox_mAP_50": 0.977, "bbox_mAP_75": 0.943, "bbox_mAP_s": 0.618, "bbox_mAP_m": 0.836, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.761 0.977 0.943 0.618 0.836 -1.000"}
{"mode": "val", "epoch": 3, "iter": 63, "lr": 0.005, "memory": 9858, "data_time": 0.04301, "loss_rpn_cls": 0.01224, "loss_rpn_bbox": 0.05341, "loss_cls": 0.08216, "acc": 96.67535, "loss_bbox": 0.16896, "loss": 0.31677, "time": 0.32939}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.005, "memory": 9858, "data_time": 0.02998, "loss_rpn_cls": 0.00663, "loss_rpn_bbox": 0.05201, "loss_cls": 0.07772, "acc": 96.88789, "loss_bbox": 0.15752, "loss": 0.29388, "time": 0.68036}
{"mode": "val", "epoch": 4, "iter": 312, "lr": 0.005, "bbox_mAP": 0.779, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.944, "bbox_mAP_s": 0.62, "bbox_mAP_m": 0.855, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.779 0.978 0.944 0.620 0.855 -1.000"}
{"mode": "val", "epoch": 4, "iter": 63, "lr": 0.005, "memory": 9858, "data_time": 0.04282, "loss_rpn_cls": 0.0096, "loss_rpn_bbox": 0.05067, "loss_cls": 0.07182, "acc": 97.1596, "loss_bbox": 0.15097, "loss": 0.28307, "time": 0.3304}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.005, "memory": 9883, "data_time": 0.03039, "loss_rpn_cls": 0.00589, "loss_rpn_bbox": 0.04785, "loss_cls": 0.06816, "acc": 97.225, "loss_bbox": 0.14726, "loss": 0.26916, "time": 0.68671}
{"mode": "val", "epoch": 5, "iter": 312, "lr": 0.005, "bbox_mAP": 0.782, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.953, "bbox_mAP_s": 0.632, "bbox_mAP_m": 0.861, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.782 0.978 0.953 0.632 0.861 -1.000"}
{"mode": "val", "epoch": 5, "iter": 63, "lr": 0.005, "memory": 9883, "data_time": 0.04285, "loss_rpn_cls": 0.01111, "loss_rpn_bbox": 0.04965, "loss_cls": 0.07314, "acc": 97.05729, "loss_bbox": 0.14853, "loss": 0.28243, "time": 0.33049}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.005, "memory": 9883, "data_time": 0.03032, "loss_rpn_cls": 0.00517, "loss_rpn_bbox": 0.0461, "loss_cls": 0.06682, "acc": 97.33945, "loss_bbox": 0.14668, "loss": 0.26477, "time": 0.68566}
{"mode": "val", "epoch": 6, "iter": 312, "lr": 0.005, "bbox_mAP": 0.776, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.944, "bbox_mAP_s": 0.537, "bbox_mAP_m": 0.852, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.776 0.978 0.944 0.537 0.852 -1.000"}
{"mode": "val", "epoch": 6, "iter": 63, "lr": 0.005, "memory": 9883, "data_time": 0.04535, "loss_rpn_cls": 0.01098, "loss_rpn_bbox": 0.05291, "loss_cls": 0.06779, "acc": 97.30345, "loss_bbox": 0.14778, "loss": 0.27946, "time": 0.33261}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.005, "memory": 9883, "data_time": 0.03055, "loss_rpn_cls": 0.00546, "loss_rpn_bbox": 0.04584, "loss_cls": 0.0622, "acc": 97.4957, "loss_bbox": 0.13947, "loss": 0.25298, "time": 0.68943}
{"mode": "val", "epoch": 7, "iter": 312, "lr": 0.005, "bbox_mAP": 0.791, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.557, "bbox_mAP_m": 0.869, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.791 0.978 0.954 0.557 0.869 -1.000"}
{"mode": "val", "epoch": 7, "iter": 63, "lr": 0.005, "memory": 9891, "data_time": 0.0436, "loss_rpn_cls": 0.01089, "loss_rpn_bbox": 0.04337, "loss_cls": 0.06561, "acc": 97.37413, "loss_bbox": 0.14187, "loss": 0.26174, "time": 0.33199}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.005, "memory": 9891, "data_time": 0.03046, "loss_rpn_cls": 0.00523, "loss_rpn_bbox": 0.04519, "loss_cls": 0.06332, "acc": 97.47305, "loss_bbox": 0.13889, "loss": 0.25262, "time": 0.68509}
{"mode": "val", "epoch": 8, "iter": 312, "lr": 0.005, "bbox_mAP": 0.776, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.944, "bbox_mAP_s": 0.584, "bbox_mAP_m": 0.854, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.776 0.978 0.944 0.584 0.854 -1.000"}
{"mode": "val", "epoch": 8, "iter": 63, "lr": 0.005, "memory": 9891, "data_time": 0.04372, "loss_rpn_cls": 0.0129, "loss_rpn_bbox": 0.04576, "loss_cls": 0.06913, "acc": 97.33693, "loss_bbox": 0.14309, "loss": 0.27087, "time": 0.33052}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.005, "memory": 9891, "data_time": 0.03051, "loss_rpn_cls": 0.00524, "loss_rpn_bbox": 0.04329, "loss_cls": 0.05789, "acc": 97.70977, "loss_bbox": 0.13381, "loss": 0.24023, "time": 0.68659}
{"mode": "val", "epoch": 9, "iter": 312, "lr": 0.005, "bbox_mAP": 0.784, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.638, "bbox_mAP_m": 0.864, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.784 0.978 0.954 0.638 0.864 -1.000"}
{"mode": "val", "epoch": 9, "iter": 63, "lr": 0.005, "memory": 9891, "data_time": 0.04332, "loss_rpn_cls": 0.01207, "loss_rpn_bbox": 0.04231, "loss_cls": 0.06463, "acc": 97.41381, "loss_bbox": 0.1416, "loss": 0.26062, "time": 0.33047}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.005, "memory": 9891, "data_time": 0.03008, "loss_rpn_cls": 0.00487, "loss_rpn_bbox": 0.04394, "loss_cls": 0.06083, "acc": 97.58633, "loss_bbox": 0.13786, "loss": 0.2475, "time": 0.68354}
{"mode": "val", "epoch": 10, "iter": 312, "lr": 0.005, "bbox_mAP": 0.779, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.627, "bbox_mAP_m": 0.86, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.779 0.978 0.954 0.627 0.860 -1.000"}
{"mode": "val", "epoch": 10, "iter": 63, "lr": 0.005, "memory": 9891, "data_time": 0.04333, "loss_rpn_cls": 0.01025, "loss_rpn_bbox": 0.0436, "loss_cls": 0.06495, "acc": 97.4287, "loss_bbox": 0.13884, "loss": 0.25764, "time": 0.33121}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.005, "memory": 9891, "data_time": 0.02984, "loss_rpn_cls": 0.00512, "loss_rpn_bbox": 0.04282, "loss_cls": 0.05618, "acc": 97.81172, "loss_bbox": 0.13338, "loss": 0.2375, "time": 0.68616}
{"mode": "val", "epoch": 11, "iter": 312, "lr": 0.005, "bbox_mAP": 0.785, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.598, "bbox_mAP_m": 0.866, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.785 0.978 0.954 0.598 0.866 -1.000"}
{"mode": "val", "epoch": 11, "iter": 63, "lr": 0.005, "memory": 9891, "data_time": 0.04352, "loss_rpn_cls": 0.01144, "loss_rpn_bbox": 0.04262, "loss_cls": 0.06593, "acc": 97.35181, "loss_bbox": 0.13874, "loss": 0.25873, "time": 0.3321}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.005, "memory": 9891, "data_time": 0.02996, "loss_rpn_cls": 0.00476, "loss_rpn_bbox": 0.04195, "loss_cls": 0.05604, "acc": 97.79727, "loss_bbox": 0.13063, "loss": 0.23338, "time": 0.68368}
{"mode": "val", "epoch": 12, "iter": 312, "lr": 0.005, "bbox_mAP": 0.781, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.597, "bbox_mAP_m": 0.861, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.781 0.978 0.954 0.597 0.861 -1.000"}
{"mode": "val", "epoch": 12, "iter": 63, "lr": 0.005, "memory": 9891, "data_time": 0.04449, "loss_rpn_cls": 0.01044, "loss_rpn_bbox": 0.04442, "loss_cls": 0.06133, "acc": 97.56014, "loss_bbox": 0.13711, "loss": 0.25331, "time": 0.33148}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.005, "memory": 9891, "data_time": 0.02996, "loss_rpn_cls": 0.00487, "loss_rpn_bbox": 0.04104, "loss_cls": 0.05232, "acc": 97.97578, "loss_bbox": 0.1283, "loss": 0.22654, "time": 0.68527}
{"mode": "val", "epoch": 13, "iter": 312, "lr": 0.005, "bbox_mAP": 0.777, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.611, "bbox_mAP_m": 0.859, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.777 0.978 0.954 0.611 0.859 -1.000"}
{"mode": "val", "epoch": 13, "iter": 63, "lr": 0.005, "memory": 9891, "data_time": 0.04354, "loss_rpn_cls": 0.01193, "loss_rpn_bbox": 0.04378, "loss_cls": 0.05765, "acc": 97.79452, "loss_bbox": 0.13391, "loss": 0.24728, "time": 0.33103}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.005, "memory": 9891, "data_time": 0.02965, "loss_rpn_cls": 0.00447, "loss_rpn_bbox": 0.04045, "loss_cls": 0.04868, "acc": 98.09766, "loss_bbox": 0.12668, "loss": 0.22028, "time": 0.68883}
{"mode": "val", "epoch": 14, "iter": 312, "lr": 0.005, "bbox_mAP": 0.783, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.648, "bbox_mAP_m": 0.864, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.783 0.978 0.954 0.648 0.864 -1.000"}
{"mode": "val", "epoch": 14, "iter": 63, "lr": 0.005, "memory": 9891, "data_time": 0.04307, "loss_rpn_cls": 0.0129, "loss_rpn_bbox": 0.04152, "loss_cls": 0.06154, "acc": 97.61037, "loss_bbox": 0.13641, "loss": 0.25237, "time": 0.33065}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.005, "memory": 9891, "data_time": 0.03022, "loss_rpn_cls": 0.00441, "loss_rpn_bbox": 0.04002, "loss_cls": 0.05194, "acc": 97.97148, "loss_bbox": 0.12616, "loss": 0.22253, "time": 0.68592}
{"mode": "val", "epoch": 15, "iter": 312, "lr": 0.005, "bbox_mAP": 0.78, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.952, "bbox_mAP_s": 0.65, "bbox_mAP_m": 0.86, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.780 0.978 0.952 0.650 0.860 -1.000"}
{"mode": "val", "epoch": 15, "iter": 63, "lr": 0.005, "memory": 9891, "data_time": 0.04316, "loss_rpn_cls": 0.0112, "loss_rpn_bbox": 0.04474, "loss_cls": 0.06033, "acc": 97.66121, "loss_bbox": 0.1351, "loss": 0.25137, "time": 0.33069}
{"mode": "train", "epoch": 16, "iter": 100, "lr": 0.005, "memory": 9891, "data_time": 0.02997, "loss_rpn_cls": 0.0044, "loss_rpn_bbox": 0.03999, "loss_cls": 0.04939, "acc": 98.09297, "loss_bbox": 0.12593, "loss": 0.21971, "time": 0.68583}
{"mode": "val", "epoch": 16, "iter": 312, "lr": 0.005, "bbox_mAP": 0.783, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.598, "bbox_mAP_m": 0.863, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.783 0.978 0.954 0.598 0.863 -1.000"}
{"mode": "val", "epoch": 16, "iter": 63, "lr": 0.005, "memory": 9891, "data_time": 0.04343, "loss_rpn_cls": 0.01192, "loss_rpn_bbox": 0.04269, "loss_cls": 0.05926, "acc": 97.68849, "loss_bbox": 0.13142, "loss": 0.24529, "time": 0.32987}
{"mode": "train", "epoch": 17, "iter": 100, "lr": 0.0005, "memory": 9891, "data_time": 0.03046, "loss_rpn_cls": 0.00379, "loss_rpn_bbox": 0.035, "loss_cls": 0.04627, "acc": 98.21094, "loss_bbox": 0.11498, "loss": 0.20004, "time": 0.68681}
{"mode": "val", "epoch": 17, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.792, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.608, "bbox_mAP_m": 0.873, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.792 0.978 0.954 0.608 0.873 -1.000"}
{"mode": "val", "epoch": 17, "iter": 63, "lr": 0.0005, "memory": 9891, "data_time": 0.04333, "loss_rpn_cls": 0.01045, "loss_rpn_bbox": 0.03759, "loss_cls": 0.05949, "acc": 97.68911, "loss_bbox": 0.12815, "loss": 0.23568, "time": 0.33088}
{"mode": "train", "epoch": 18, "iter": 100, "lr": 0.0005, "memory": 9891, "data_time": 0.03028, "loss_rpn_cls": 0.00347, "loss_rpn_bbox": 0.03403, "loss_cls": 0.04509, "acc": 98.27188, "loss_bbox": 0.11323, "loss": 0.19582, "time": 0.68291}
{"mode": "val", "epoch": 18, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.793, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.587, "bbox_mAP_m": 0.873, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.793 0.978 0.954 0.587 0.873 -1.000"}
{"mode": "val", "epoch": 18, "iter": 63, "lr": 0.0005, "memory": 9891, "data_time": 0.04342, "loss_rpn_cls": 0.01083, "loss_rpn_bbox": 0.03724, "loss_cls": 0.05798, "acc": 97.78894, "loss_bbox": 0.12702, "loss": 0.23307, "time": 0.33084}
{"mode": "train", "epoch": 19, "iter": 100, "lr": 0.0005, "memory": 9891, "data_time": 0.03029, "loss_rpn_cls": 0.00333, "loss_rpn_bbox": 0.03378, "loss_cls": 0.04471, "acc": 98.31133, "loss_bbox": 0.11142, "loss": 0.19325, "time": 0.68264}
{"mode": "val", "epoch": 19, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.793, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.589, "bbox_mAP_m": 0.874, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.793 0.978 0.954 0.589 0.874 -1.000"}
{"mode": "val", "epoch": 19, "iter": 63, "lr": 0.0005, "memory": 9891, "data_time": 0.0435, "loss_rpn_cls": 0.01154, "loss_rpn_bbox": 0.03733, "loss_cls": 0.05643, "acc": 97.8466, "loss_bbox": 0.12533, "loss": 0.23062, "time": 0.33034}
{"mode": "train", "epoch": 20, "iter": 100, "lr": 0.0005, "memory": 9891, "data_time": 0.03034, "loss_rpn_cls": 0.00356, "loss_rpn_bbox": 0.03376, "loss_cls": 0.04537, "acc": 98.23164, "loss_bbox": 0.11169, "loss": 0.19439, "time": 0.68275}
{"mode": "val", "epoch": 20, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.792, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.605, "bbox_mAP_m": 0.873, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.792 0.978 0.954 0.605 0.873 -1.000"}
{"mode": "val", "epoch": 20, "iter": 63, "lr": 0.0005, "memory": 9891, "data_time": 0.04584, "loss_rpn_cls": 0.01107, "loss_rpn_bbox": 0.03738, "loss_cls": 0.05963, "acc": 97.77468, "loss_bbox": 0.12683, "loss": 0.2349, "time": 0.3341}
{"mode": "train", "epoch": 21, "iter": 100, "lr": 0.0005, "memory": 9891, "data_time": 0.02989, "loss_rpn_cls": 0.00295, "loss_rpn_bbox": 0.03371, "loss_cls": 0.04597, "acc": 98.24883, "loss_bbox": 0.11245, "loss": 0.19508, "time": 0.68293}
{"mode": "val", "epoch": 21, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.793, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.584, "bbox_mAP_m": 0.874, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.793 0.978 0.954 0.584 0.874 -1.000"}
{"mode": "val", "epoch": 21, "iter": 63, "lr": 0.0005, "memory": 9891, "data_time": 0.0434, "loss_rpn_cls": 0.00989, "loss_rpn_bbox": 0.03707, "loss_cls": 0.05802, "acc": 97.77902, "loss_bbox": 0.12584, "loss": 0.23082, "time": 0.33088}
{"mode": "train", "epoch": 22, "iter": 100, "lr": 0.0005, "memory": 9891, "data_time": 0.02974, "loss_rpn_cls": 0.0035, "loss_rpn_bbox": 0.03344, "loss_cls": 0.04403, "acc": 98.29102, "loss_bbox": 0.10998, "loss": 0.19095, "time": 0.68292}
{"mode": "val", "epoch": 22, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.794, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.588, "bbox_mAP_m": 0.875, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.794 0.978 0.954 0.588 0.875 -1.000"}
{"mode": "val", "epoch": 22, "iter": 63, "lr": 0.0005, "memory": 9891, "data_time": 0.04368, "loss_rpn_cls": 0.01073, "loss_rpn_bbox": 0.03717, "loss_cls": 0.05821, "acc": 97.76786, "loss_bbox": 0.12673, "loss": 0.23284, "time": 0.33156}
{"mode": "train", "epoch": 23, "iter": 100, "lr": 5e-05, "memory": 9891, "data_time": 0.03001, "loss_rpn_cls": 0.0034, "loss_rpn_bbox": 0.03351, "loss_cls": 0.04374, "acc": 98.30625, "loss_bbox": 0.11024, "loss": 0.19089, "time": 0.68523}
{"mode": "val", "epoch": 23, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.592, "bbox_mAP_m": 0.876, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.954 0.592 0.876 -1.000"}
{"mode": "val", "epoch": 23, "iter": 63, "lr": 5e-05, "memory": 9891, "data_time": 0.04359, "loss_rpn_cls": 0.0113, "loss_rpn_bbox": 0.03685, "loss_cls": 0.05693, "acc": 97.81002, "loss_bbox": 0.12444, "loss": 0.22951, "time": 0.33167}
{"mode": "train", "epoch": 24, "iter": 100, "lr": 5e-05, "memory": 9891, "data_time": 0.02981, "loss_rpn_cls": 0.00323, "loss_rpn_bbox": 0.03322, "loss_cls": 0.04253, "acc": 98.38906, "loss_bbox": 0.10975, "loss": 0.18873, "time": 0.68382}
{"mode": "val", "epoch": 24, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.592, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.954 0.592 0.877 -1.000"}
{"mode": "val", "epoch": 24, "iter": 63, "lr": 5e-05, "memory": 9891, "data_time": 0.04309, "loss_rpn_cls": 0.0102, "loss_rpn_bbox": 0.03678, "loss_cls": 0.05744, "acc": 97.83854, "loss_bbox": 0.12535, "loss": 0.22977, "time": 0.33036}
{"mode": "train", "epoch": 25, "iter": 100, "lr": 5e-05, "memory": 9891, "data_time": 0.02985, "loss_rpn_cls": 0.00298, "loss_rpn_bbox": 0.0331, "loss_cls": 0.04293, "acc": 98.32656, "loss_bbox": 0.11022, "loss": 0.18924, "time": 0.68367}
{"mode": "val", "epoch": 25, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.598, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.954 0.598 0.877 -1.000"}
{"mode": "val", "epoch": 25, "iter": 63, "lr": 5e-05, "memory": 9891, "data_time": 0.04345, "loss_rpn_cls": 0.01094, "loss_rpn_bbox": 0.03688, "loss_cls": 0.05618, "acc": 97.84288, "loss_bbox": 0.12362, "loss": 0.22762, "time": 0.33208}
{"mode": "train", "epoch": 26, "iter": 100, "lr": 5e-05, "memory": 9891, "data_time": 0.03029, "loss_rpn_cls": 0.00335, "loss_rpn_bbox": 0.03325, "loss_cls": 0.04426, "acc": 98.29883, "loss_bbox": 0.10932, "loss": 0.19019, "time": 0.68498}
{"mode": "val", "epoch": 26, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.6, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.954 0.600 0.877 -1.000"}
{"mode": "val", "epoch": 26, "iter": 63, "lr": 5e-05, "memory": 9891, "data_time": 0.04344, "loss_rpn_cls": 0.00989, "loss_rpn_bbox": 0.03684, "loss_cls": 0.05637, "acc": 97.84722, "loss_bbox": 0.12457, "loss": 0.22768, "time": 0.32988}
{"mode": "train", "epoch": 27, "iter": 100, "lr": 5e-05, "memory": 9891, "data_time": 0.03038, "loss_rpn_cls": 0.00303, "loss_rpn_bbox": 0.03339, "loss_cls": 0.04332, "acc": 98.32383, "loss_bbox": 0.10971, "loss": 0.18945, "time": 0.68601}
{"mode": "val", "epoch": 27, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.592, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.954 0.592 0.877 -1.000"}
{"mode": "val", "epoch": 27, "iter": 63, "lr": 5e-05, "memory": 9891, "data_time": 0.04343, "loss_rpn_cls": 0.01046, "loss_rpn_bbox": 0.03684, "loss_cls": 0.05663, "acc": 97.88938, "loss_bbox": 0.12569, "loss": 0.22962, "time": 0.3314}
{"mode": "train", "epoch": 28, "iter": 100, "lr": 5e-05, "memory": 9891, "data_time": 0.03065, "loss_rpn_cls": 0.00288, "loss_rpn_bbox": 0.03304, "loss_cls": 0.0434, "acc": 98.33672, "loss_bbox": 0.10827, "loss": 0.18758, "time": 0.68279}
{"mode": "val", "epoch": 28, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.594, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.954 0.594 0.877 -1.000"}
{"mode": "val", "epoch": 28, "iter": 63, "lr": 5e-05, "memory": 9891, "data_time": 0.043, "loss_rpn_cls": 0.01156, "loss_rpn_bbox": 0.03694, "loss_cls": 0.05684, "acc": 97.81684, "loss_bbox": 0.12419, "loss": 0.22953, "time": 0.33175}
{"mode": "train", "epoch": 29, "iter": 100, "lr": 5e-05, "memory": 9891, "data_time": 0.02979, "loss_rpn_cls": 0.00347, "loss_rpn_bbox": 0.03323, "loss_cls": 0.04388, "acc": 98.31914, "loss_bbox": 0.11067, "loss": 0.19125, "time": 0.67935}
{"mode": "val", "epoch": 29, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.597, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.954 0.597 0.877 -1.000"}
{"mode": "val", "epoch": 29, "iter": 63, "lr": 5e-05, "memory": 9891, "data_time": 0.04309, "loss_rpn_cls": 0.01099, "loss_rpn_bbox": 0.03689, "loss_cls": 0.05765, "acc": 97.8373, "loss_bbox": 0.12435, "loss": 0.22988, "time": 0.32988}
{"mode": "train", "epoch": 30, "iter": 100, "lr": 5e-05, "memory": 9891, "data_time": 0.03029, "loss_rpn_cls": 0.00331, "loss_rpn_bbox": 0.03295, "loss_cls": 0.04422, "acc": 98.31211, "loss_bbox": 0.10956, "loss": 0.19004, "time": 0.68323}
{"mode": "val", "epoch": 30, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.585, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.954 0.585 0.877 -1.000"}
{"mode": "val", "epoch": 30, "iter": 63, "lr": 5e-05, "memory": 9891, "data_time": 0.0431, "loss_rpn_cls": 0.01143, "loss_rpn_bbox": 0.03665, "loss_cls": 0.05783, "acc": 97.78026, "loss_bbox": 0.12339, "loss": 0.2293, "time": 0.32991}
