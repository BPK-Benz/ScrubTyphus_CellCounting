{"env_info": "sys.platform: linux\nPython: 3.9.15 (main, Nov 24 2022, 14:31:59) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA RTX A4000\nCUDA_HOME: /opt/anaconda3\nNVCC: Cuda compilation tools, release 11.7, V11.7.99\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.13.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.7\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.5\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.0\nOpenCV: 4.6.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.7\nMMDetection: 2.26.0+", "config": "model = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.5),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=300)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[25.526, 0.386, 52.85], std=[53.347, 9.402, 53.172], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n    dict(\n        type='RandomFlip',\n        flip_ratio=0.5,\n        direction=['horizontal', 'vertical']),\n    dict(\n        type='Normalize',\n        mean=[25.526, 0.386, 52.85],\n        std=[53.347, 9.402, 53.172],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1020, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=5,\n    workers_per_gpu=1,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/share/NAS/Benz_Cell/cellLabel-main/Coco_File/Cell_TrainNuc_April.json',\n        img_prefix='/share/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('object', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/share/NAS/Benz_Cell/cellLabel-main/Coco_File/Cell_TestNuc_April.json',\n        img_prefix='/share/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('object', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/share/NAS/Benz_Cell/cellLabel-main/Coco_File/Cell_TestNuc_April.json',\n        img_prefix='/share/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('object', )))\nevaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP')\noptimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=30)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained_models/faster_rcnn_r50_fpn_2x_coco_bbox_mAP-0.384_20200504_210434-a5d8aa15.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('object', )\nimg_scale = (1020, 768)\nbase = '/share/NAS/Benz_Cell/cellLabel-main/'\ndevice = 'cuda'\nwork_dir = './work_dirs/New_OCT/FasterRCNN_R50_CellNuc'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 669201247, "exp_name": "faster_rcnn_r50_CellNucNo.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00099, "memory": 6460, "data_time": 0.03017, "loss_rpn_cls": 0.1557, "loss_rpn_bbox": 0.10106, "loss_cls": 0.33558, "acc": 82.58281, "loss_bbox": 0.48867, "loss": 1.08101, "time": 0.51479}
{"mode": "val", "epoch": 1, "iter": 312, "lr": 0.00177, "bbox_mAP": 0.725, "bbox_mAP_50": 0.976, "bbox_mAP_75": 0.919, "bbox_mAP_s": 0.498, "bbox_mAP_m": 0.797, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.725 0.976 0.919 0.498 0.797 -1.000"}
{"mode": "val", "epoch": 1, "iter": 63, "lr": 0.00177, "memory": 6599, "data_time": 0.04267, "loss_rpn_cls": 0.01259, "loss_rpn_bbox": 0.06213, "loss_cls": 0.11422, "acc": 95.45325, "loss_bbox": 0.19956, "loss": 0.3885, "time": 0.28164}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00277, "memory": 6599, "data_time": 0.03084, "loss_rpn_cls": 0.00862, "loss_rpn_bbox": 0.05655, "loss_cls": 0.09796, "acc": 96.07539, "loss_bbox": 0.17961, "loss": 0.34274, "time": 0.51249}
{"mode": "val", "epoch": 2, "iter": 312, "lr": 0.00355, "bbox_mAP": 0.746, "bbox_mAP_50": 0.976, "bbox_mAP_75": 0.931, "bbox_mAP_s": 0.608, "bbox_mAP_m": 0.821, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.746 0.976 0.931 0.608 0.821 -1.000"}
{"mode": "val", "epoch": 2, "iter": 63, "lr": 0.00355, "memory": 6599, "data_time": 0.04982, "loss_rpn_cls": 0.01039, "loss_rpn_bbox": 0.05524, "loss_cls": 0.08532, "acc": 96.67225, "loss_bbox": 0.18215, "loss": 0.3331, "time": 0.28829}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00455, "memory": 6599, "data_time": 0.03071, "loss_rpn_cls": 0.00685, "loss_rpn_bbox": 0.05107, "loss_cls": 0.07763, "acc": 96.95547, "loss_bbox": 0.16288, "loss": 0.29844, "time": 0.50785}
{"mode": "val", "epoch": 3, "iter": 312, "lr": 0.005, "bbox_mAP": 0.77, "bbox_mAP_50": 0.977, "bbox_mAP_75": 0.943, "bbox_mAP_s": 0.599, "bbox_mAP_m": 0.845, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.770 0.977 0.943 0.599 0.845 -1.000"}
{"mode": "val", "epoch": 3, "iter": 63, "lr": 0.005, "memory": 6599, "data_time": 0.0432, "loss_rpn_cls": 0.00977, "loss_rpn_bbox": 0.05295, "loss_cls": 0.07913, "acc": 96.86446, "loss_bbox": 0.15497, "loss": 0.29683, "time": 0.28155}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.005, "memory": 6607, "data_time": 0.0299, "loss_rpn_cls": 0.00738, "loss_rpn_bbox": 0.05105, "loss_cls": 0.07214, "acc": 97.18555, "loss_bbox": 0.15235, "loss": 0.28292, "time": 0.50852}
{"mode": "val", "epoch": 4, "iter": 312, "lr": 0.005, "bbox_mAP": 0.748, "bbox_mAP_50": 0.977, "bbox_mAP_75": 0.942, "bbox_mAP_s": 0.654, "bbox_mAP_m": 0.825, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.748 0.977 0.942 0.654 0.825 -1.000"}
{"mode": "val", "epoch": 4, "iter": 63, "lr": 0.005, "memory": 6607, "data_time": 0.04434, "loss_rpn_cls": 0.01144, "loss_rpn_bbox": 0.05319, "loss_cls": 0.07763, "acc": 96.97235, "loss_bbox": 0.16475, "loss": 0.30701, "time": 0.28201}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.005, "memory": 6607, "data_time": 0.03017, "loss_rpn_cls": 0.00678, "loss_rpn_bbox": 0.04788, "loss_cls": 0.06335, "acc": 97.46016, "loss_bbox": 0.14825, "loss": 0.26625, "time": 0.51466}
{"mode": "val", "epoch": 5, "iter": 312, "lr": 0.005, "bbox_mAP": 0.778, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.953, "bbox_mAP_s": 0.59, "bbox_mAP_m": 0.858, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.778 0.978 0.953 0.590 0.858 -1.000"}
{"mode": "val", "epoch": 5, "iter": 63, "lr": 0.005, "memory": 6607, "data_time": 0.04438, "loss_rpn_cls": 0.01002, "loss_rpn_bbox": 0.04631, "loss_cls": 0.07186, "acc": 97.1534, "loss_bbox": 0.15496, "loss": 0.28315, "time": 0.28372}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.005, "memory": 6607, "data_time": 0.03029, "loss_rpn_cls": 0.00557, "loss_rpn_bbox": 0.04674, "loss_cls": 0.06371, "acc": 97.47891, "loss_bbox": 0.14444, "loss": 0.26046, "time": 0.51524}
{"mode": "val", "epoch": 6, "iter": 312, "lr": 0.005, "bbox_mAP": 0.78, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.944, "bbox_mAP_s": 0.608, "bbox_mAP_m": 0.857, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.780 0.978 0.944 0.608 0.857 -1.000"}
{"mode": "val", "epoch": 6, "iter": 63, "lr": 0.005, "memory": 6607, "data_time": 0.04386, "loss_rpn_cls": 0.01204, "loss_rpn_bbox": 0.04786, "loss_cls": 0.06939, "acc": 97.28237, "loss_bbox": 0.15221, "loss": 0.28149, "time": 0.28383}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.005, "memory": 6607, "data_time": 0.03004, "loss_rpn_cls": 0.00548, "loss_rpn_bbox": 0.04667, "loss_cls": 0.0608, "acc": 97.61133, "loss_bbox": 0.14181, "loss": 0.25476, "time": 0.52535}
{"mode": "val", "epoch": 7, "iter": 312, "lr": 0.005, "bbox_mAP": 0.786, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.953, "bbox_mAP_s": 0.652, "bbox_mAP_m": 0.866, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.786 0.978 0.953 0.652 0.866 -1.000"}
{"mode": "val", "epoch": 7, "iter": 63, "lr": 0.005, "memory": 6607, "data_time": 0.04458, "loss_rpn_cls": 0.01037, "loss_rpn_bbox": 0.04436, "loss_cls": 0.06539, "acc": 97.42746, "loss_bbox": 0.14472, "loss": 0.26485, "time": 0.28696}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.005, "memory": 6607, "data_time": 0.02995, "loss_rpn_cls": 0.00575, "loss_rpn_bbox": 0.0443, "loss_cls": 0.05677, "acc": 97.76562, "loss_bbox": 0.13589, "loss": 0.24271, "time": 0.5292}
{"mode": "val", "epoch": 8, "iter": 312, "lr": 0.005, "bbox_mAP": 0.79, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.634, "bbox_mAP_m": 0.869, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.790 0.978 0.954 0.634 0.869 -1.000"}
{"mode": "val", "epoch": 8, "iter": 63, "lr": 0.005, "memory": 6607, "data_time": 0.04321, "loss_rpn_cls": 0.00945, "loss_rpn_bbox": 0.04322, "loss_cls": 0.06461, "acc": 97.42684, "loss_bbox": 0.13845, "loss": 0.25573, "time": 0.2836}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.005, "memory": 6607, "data_time": 0.03012, "loss_rpn_cls": 0.0057, "loss_rpn_bbox": 0.04335, "loss_cls": 0.059, "acc": 97.64922, "loss_bbox": 0.13598, "loss": 0.24402, "time": 0.52776}
{"mode": "val", "epoch": 9, "iter": 312, "lr": 0.005, "bbox_mAP": 0.783, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.664, "bbox_mAP_m": 0.861, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.783 0.978 0.954 0.664 0.861 -1.000"}
{"mode": "val", "epoch": 9, "iter": 63, "lr": 0.005, "memory": 6607, "data_time": 0.04327, "loss_rpn_cls": 0.01156, "loss_rpn_bbox": 0.04464, "loss_cls": 0.06323, "acc": 97.52046, "loss_bbox": 0.14159, "loss": 0.26103, "time": 0.28272}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.005, "memory": 6607, "data_time": 0.03062, "loss_rpn_cls": 0.00498, "loss_rpn_bbox": 0.04352, "loss_cls": 0.05654, "acc": 97.7707, "loss_bbox": 0.13511, "loss": 0.24016, "time": 0.52587}
{"mode": "val", "epoch": 10, "iter": 312, "lr": 0.005, "bbox_mAP": 0.785, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.604, "bbox_mAP_m": 0.865, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.785 0.978 0.954 0.604 0.865 -1.000"}
{"mode": "val", "epoch": 10, "iter": 63, "lr": 0.005, "memory": 6607, "data_time": 0.04295, "loss_rpn_cls": 0.00964, "loss_rpn_bbox": 0.04227, "loss_cls": 0.05915, "acc": 97.68787, "loss_bbox": 0.13705, "loss": 0.2481, "time": 0.28286}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.005, "memory": 6607, "data_time": 0.0321, "loss_rpn_cls": 0.00486, "loss_rpn_bbox": 0.04105, "loss_cls": 0.05144, "acc": 97.95391, "loss_bbox": 0.12726, "loss": 0.22461, "time": 0.52797}
{"mode": "val", "epoch": 11, "iter": 312, "lr": 0.005, "bbox_mAP": 0.789, "bbox_mAP_50": 0.987, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.64, "bbox_mAP_m": 0.87, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.789 0.987 0.954 0.640 0.870 -1.000"}
{"mode": "val", "epoch": 11, "iter": 63, "lr": 0.005, "memory": 6616, "data_time": 0.04865, "loss_rpn_cls": 0.00994, "loss_rpn_bbox": 0.04094, "loss_cls": 0.0632, "acc": 97.55332, "loss_bbox": 0.14032, "loss": 0.2544, "time": 0.29047}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.005, "memory": 6616, "data_time": 0.03059, "loss_rpn_cls": 0.00402, "loss_rpn_bbox": 0.0412, "loss_cls": 0.05355, "acc": 97.87266, "loss_bbox": 0.13164, "loss": 0.23041, "time": 0.52399}
{"mode": "val", "epoch": 12, "iter": 312, "lr": 0.005, "bbox_mAP": 0.785, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.587, "bbox_mAP_m": 0.864, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.785 0.978 0.954 0.587 0.864 -1.000"}
{"mode": "val", "epoch": 12, "iter": 63, "lr": 0.005, "memory": 6616, "data_time": 0.04383, "loss_rpn_cls": 0.01076, "loss_rpn_bbox": 0.04535, "loss_cls": 0.05988, "acc": 97.64819, "loss_bbox": 0.14116, "loss": 0.25715, "time": 0.28293}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.005, "memory": 6616, "data_time": 0.03043, "loss_rpn_cls": 0.00478, "loss_rpn_bbox": 0.04043, "loss_cls": 0.05146, "acc": 98.00898, "loss_bbox": 0.12758, "loss": 0.22425, "time": 0.52384}
{"mode": "val", "epoch": 13, "iter": 312, "lr": 0.005, "bbox_mAP": 0.777, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.596, "bbox_mAP_m": 0.856, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.777 0.978 0.954 0.596 0.856 -1.000"}
{"mode": "val", "epoch": 13, "iter": 63, "lr": 0.005, "memory": 6616, "data_time": 0.04406, "loss_rpn_cls": 0.00933, "loss_rpn_bbox": 0.04927, "loss_cls": 0.05759, "acc": 97.72817, "loss_bbox": 0.13877, "loss": 0.25495, "time": 0.28297}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.005, "memory": 6616, "data_time": 0.03006, "loss_rpn_cls": 0.00471, "loss_rpn_bbox": 0.0407, "loss_cls": 0.04952, "acc": 98.11016, "loss_bbox": 0.12786, "loss": 0.22279, "time": 0.52426}
{"mode": "val", "epoch": 14, "iter": 312, "lr": 0.005, "bbox_mAP": 0.783, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.584, "bbox_mAP_m": 0.863, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.783 0.978 0.954 0.584 0.863 -1.000"}
{"mode": "val", "epoch": 14, "iter": 63, "lr": 0.005, "memory": 6616, "data_time": 0.04402, "loss_rpn_cls": 0.00969, "loss_rpn_bbox": 0.04342, "loss_cls": 0.05483, "acc": 97.80692, "loss_bbox": 0.13536, "loss": 0.2433, "time": 0.28502}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.005, "memory": 6616, "data_time": 0.03033, "loss_rpn_cls": 0.00448, "loss_rpn_bbox": 0.04067, "loss_cls": 0.04841, "acc": 98.09727, "loss_bbox": 0.12793, "loss": 0.2215, "time": 0.52514}
{"mode": "val", "epoch": 15, "iter": 312, "lr": 0.005, "bbox_mAP": 0.786, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.645, "bbox_mAP_m": 0.867, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.786 0.978 0.954 0.645 0.867 -1.000"}
{"mode": "val", "epoch": 15, "iter": 63, "lr": 0.005, "memory": 6616, "data_time": 0.04323, "loss_rpn_cls": 0.01093, "loss_rpn_bbox": 0.04177, "loss_cls": 0.0598, "acc": 97.66245, "loss_bbox": 0.13843, "loss": 0.25092, "time": 0.2837}
{"mode": "train", "epoch": 16, "iter": 100, "lr": 0.005, "memory": 6616, "data_time": 0.02994, "loss_rpn_cls": 0.00457, "loss_rpn_bbox": 0.03931, "loss_cls": 0.0477, "acc": 98.14258, "loss_bbox": 0.12497, "loss": 0.21656, "time": 0.52466}
{"mode": "val", "epoch": 16, "iter": 312, "lr": 0.005, "bbox_mAP": 0.789, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.576, "bbox_mAP_m": 0.87, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.789 0.978 0.954 0.576 0.870 -1.000"}
{"mode": "val", "epoch": 16, "iter": 63, "lr": 0.005, "memory": 6616, "data_time": 0.04348, "loss_rpn_cls": 0.00893, "loss_rpn_bbox": 0.03957, "loss_cls": 0.05802, "acc": 97.79204, "loss_bbox": 0.13246, "loss": 0.23897, "time": 0.28274}
{"mode": "train", "epoch": 17, "iter": 100, "lr": 0.0005, "memory": 6616, "data_time": 0.03048, "loss_rpn_cls": 0.00408, "loss_rpn_bbox": 0.03537, "loss_cls": 0.04378, "acc": 98.30859, "loss_bbox": 0.11628, "loss": 0.19951, "time": 0.5229}
{"mode": "val", "epoch": 17, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.794, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.6, "bbox_mAP_m": 0.873, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.794 0.978 0.954 0.600 0.873 -1.000"}
{"mode": "val", "epoch": 17, "iter": 63, "lr": 0.0005, "memory": 6616, "data_time": 0.04344, "loss_rpn_cls": 0.01003, "loss_rpn_bbox": 0.03748, "loss_cls": 0.05523, "acc": 97.89125, "loss_bbox": 0.12635, "loss": 0.22909, "time": 0.28394}
{"mode": "train", "epoch": 18, "iter": 100, "lr": 0.0005, "memory": 6616, "data_time": 0.03287, "loss_rpn_cls": 0.00294, "loss_rpn_bbox": 0.03358, "loss_cls": 0.0445, "acc": 98.31016, "loss_bbox": 0.11268, "loss": 0.1937, "time": 0.52347}
{"mode": "val", "epoch": 18, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.609, "bbox_mAP_m": 0.875, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.954 0.609 0.875 -1.000"}
{"mode": "val", "epoch": 18, "iter": 63, "lr": 0.0005, "memory": 6616, "data_time": 0.04352, "loss_rpn_cls": 0.00961, "loss_rpn_bbox": 0.03734, "loss_cls": 0.05529, "acc": 97.89187, "loss_bbox": 0.12517, "loss": 0.22742, "time": 0.2822}
{"mode": "train", "epoch": 19, "iter": 100, "lr": 0.0005, "memory": 6616, "data_time": 0.03106, "loss_rpn_cls": 0.00403, "loss_rpn_bbox": 0.03497, "loss_cls": 0.04285, "acc": 98.37734, "loss_bbox": 0.1137, "loss": 0.19555, "time": 0.52373}
{"mode": "val", "epoch": 19, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.617, "bbox_mAP_m": 0.875, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.954 0.617 0.875 -1.000"}
{"mode": "val", "epoch": 19, "iter": 63, "lr": 0.0005, "memory": 6616, "data_time": 0.04656, "loss_rpn_cls": 0.00977, "loss_rpn_bbox": 0.03703, "loss_cls": 0.05733, "acc": 97.83482, "loss_bbox": 0.1252, "loss": 0.22931, "time": 0.28762}
{"mode": "train", "epoch": 20, "iter": 100, "lr": 0.0005, "memory": 6616, "data_time": 0.03047, "loss_rpn_cls": 0.00359, "loss_rpn_bbox": 0.03391, "loss_cls": 0.0425, "acc": 98.39258, "loss_bbox": 0.11117, "loss": 0.19117, "time": 0.52175}
{"mode": "val", "epoch": 20, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.794, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.613, "bbox_mAP_m": 0.874, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.794 0.978 0.954 0.613 0.874 -1.000"}
{"mode": "val", "epoch": 20, "iter": 63, "lr": 0.0005, "memory": 6616, "data_time": 0.04543, "loss_rpn_cls": 0.01039, "loss_rpn_bbox": 0.0374, "loss_cls": 0.05614, "acc": 97.85466, "loss_bbox": 0.12519, "loss": 0.22913, "time": 0.28547}
{"mode": "train", "epoch": 21, "iter": 100, "lr": 0.0005, "memory": 6616, "data_time": 0.03024, "loss_rpn_cls": 0.00345, "loss_rpn_bbox": 0.03417, "loss_cls": 0.04262, "acc": 98.35547, "loss_bbox": 0.11152, "loss": 0.19176, "time": 0.52098}
{"mode": "val", "epoch": 21, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.794, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.617, "bbox_mAP_m": 0.875, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.794 0.978 0.954 0.617 0.875 -1.000"}
{"mode": "val", "epoch": 21, "iter": 63, "lr": 0.0005, "memory": 6616, "data_time": 0.04357, "loss_rpn_cls": 0.01063, "loss_rpn_bbox": 0.03714, "loss_cls": 0.05576, "acc": 97.85838, "loss_bbox": 0.12469, "loss": 0.22821, "time": 0.28296}
{"mode": "train", "epoch": 22, "iter": 100, "lr": 0.0005, "memory": 6616, "data_time": 0.02995, "loss_rpn_cls": 0.00332, "loss_rpn_bbox": 0.03381, "loss_cls": 0.04479, "acc": 98.27812, "loss_bbox": 0.11335, "loss": 0.19527, "time": 0.51944}
{"mode": "val", "epoch": 22, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.607, "bbox_mAP_m": 0.875, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.954 0.607 0.875 -1.000"}
{"mode": "val", "epoch": 22, "iter": 63, "lr": 0.0005, "memory": 6616, "data_time": 0.04354, "loss_rpn_cls": 0.01068, "loss_rpn_bbox": 0.03766, "loss_cls": 0.0551, "acc": 97.89187, "loss_bbox": 0.12518, "loss": 0.22861, "time": 0.29056}
{"mode": "train", "epoch": 23, "iter": 100, "lr": 5e-05, "memory": 6616, "data_time": 0.03021, "loss_rpn_cls": 0.00362, "loss_rpn_bbox": 0.03342, "loss_cls": 0.04159, "acc": 98.41133, "loss_bbox": 0.10997, "loss": 0.18859, "time": 0.52149}
{"mode": "val", "epoch": 23, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.796, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.612, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.796 0.978 0.954 0.612 0.877 -1.000"}
{"mode": "val", "epoch": 23, "iter": 63, "lr": 5e-05, "memory": 6616, "data_time": 0.0438, "loss_rpn_cls": 0.00967, "loss_rpn_bbox": 0.03674, "loss_cls": 0.05522, "acc": 97.85404, "loss_bbox": 0.12572, "loss": 0.22735, "time": 0.28465}
{"mode": "train", "epoch": 24, "iter": 100, "lr": 5e-05, "memory": 6616, "data_time": 0.02973, "loss_rpn_cls": 0.00341, "loss_rpn_bbox": 0.03368, "loss_cls": 0.04211, "acc": 98.3625, "loss_bbox": 0.11057, "loss": 0.18976, "time": 0.5232}
{"mode": "val", "epoch": 24, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.796, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.614, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.796 0.978 0.954 0.614 0.877 -1.000"}
{"mode": "val", "epoch": 24, "iter": 63, "lr": 5e-05, "memory": 6616, "data_time": 0.04267, "loss_rpn_cls": 0.01108, "loss_rpn_bbox": 0.03675, "loss_cls": 0.05545, "acc": 97.85218, "loss_bbox": 0.12494, "loss": 0.22822, "time": 0.28189}
{"mode": "train", "epoch": 25, "iter": 100, "lr": 5e-05, "memory": 6616, "data_time": 0.02999, "loss_rpn_cls": 0.00351, "loss_rpn_bbox": 0.03323, "loss_cls": 0.04143, "acc": 98.41016, "loss_bbox": 0.10837, "loss": 0.18654, "time": 0.52105}
{"mode": "val", "epoch": 25, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.796, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.612, "bbox_mAP_m": 0.878, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.796 0.978 0.954 0.612 0.878 -1.000"}
{"mode": "val", "epoch": 25, "iter": 63, "lr": 5e-05, "memory": 6616, "data_time": 0.04306, "loss_rpn_cls": 0.01088, "loss_rpn_bbox": 0.0368, "loss_cls": 0.05506, "acc": 97.89621, "loss_bbox": 0.12441, "loss": 0.22716, "time": 0.28192}
{"mode": "train", "epoch": 26, "iter": 100, "lr": 5e-05, "memory": 6616, "data_time": 0.02999, "loss_rpn_cls": 0.00356, "loss_rpn_bbox": 0.03299, "loss_cls": 0.04195, "acc": 98.41641, "loss_bbox": 0.11029, "loss": 0.18878, "time": 0.51825}
{"mode": "val", "epoch": 26, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.796, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.615, "bbox_mAP_m": 0.878, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.796 0.978 0.954 0.615 0.878 -1.000"}
{"mode": "val", "epoch": 26, "iter": 63, "lr": 5e-05, "memory": 6616, "data_time": 0.04332, "loss_rpn_cls": 0.0106, "loss_rpn_bbox": 0.0369, "loss_cls": 0.05638, "acc": 97.82676, "loss_bbox": 0.125, "loss": 0.22887, "time": 0.28246}
{"mode": "train", "epoch": 27, "iter": 100, "lr": 5e-05, "memory": 6616, "data_time": 0.03034, "loss_rpn_cls": 0.00308, "loss_rpn_bbox": 0.03292, "loss_cls": 0.04252, "acc": 98.36758, "loss_bbox": 0.10904, "loss": 0.18756, "time": 0.51954}
{"mode": "val", "epoch": 27, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.796, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.614, "bbox_mAP_m": 0.878, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.796 0.978 0.954 0.614 0.878 -1.000"}
{"mode": "val", "epoch": 27, "iter": 63, "lr": 5e-05, "memory": 6616, "data_time": 0.04356, "loss_rpn_cls": 0.00988, "loss_rpn_bbox": 0.03691, "loss_cls": 0.05525, "acc": 97.89745, "loss_bbox": 0.12487, "loss": 0.22692, "time": 0.28291}
{"mode": "train", "epoch": 28, "iter": 100, "lr": 5e-05, "memory": 6616, "data_time": 0.0301, "loss_rpn_cls": 0.00293, "loss_rpn_bbox": 0.03289, "loss_cls": 0.04367, "acc": 98.34648, "loss_bbox": 0.1097, "loss": 0.18918, "time": 0.51941}
{"mode": "val", "epoch": 28, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.796, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.612, "bbox_mAP_m": 0.876, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.796 0.978 0.954 0.612 0.876 -1.000"}
{"mode": "val", "epoch": 28, "iter": 63, "lr": 5e-05, "memory": 6616, "data_time": 0.04356, "loss_rpn_cls": 0.01132, "loss_rpn_bbox": 0.03742, "loss_cls": 0.05513, "acc": 97.89497, "loss_bbox": 0.12544, "loss": 0.22932, "time": 0.28158}
{"mode": "train", "epoch": 29, "iter": 100, "lr": 5e-05, "memory": 6616, "data_time": 0.03007, "loss_rpn_cls": 0.00326, "loss_rpn_bbox": 0.03385, "loss_cls": 0.0417, "acc": 98.41211, "loss_bbox": 0.11221, "loss": 0.19103, "time": 0.51891}
{"mode": "val", "epoch": 29, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.796, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.61, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.796 0.978 0.954 0.610 0.877 -1.000"}
{"mode": "val", "epoch": 29, "iter": 63, "lr": 5e-05, "memory": 6616, "data_time": 0.0434, "loss_rpn_cls": 0.01047, "loss_rpn_bbox": 0.03691, "loss_cls": 0.05528, "acc": 97.8745, "loss_bbox": 0.12566, "loss": 0.22832, "time": 0.28008}
{"mode": "train", "epoch": 30, "iter": 100, "lr": 5e-05, "memory": 6616, "data_time": 0.02991, "loss_rpn_cls": 0.00327, "loss_rpn_bbox": 0.0334, "loss_cls": 0.04264, "acc": 98.36094, "loss_bbox": 0.11022, "loss": 0.18954, "time": 0.51587}
{"mode": "val", "epoch": 30, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.796, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.612, "bbox_mAP_m": 0.878, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.796 0.978 0.954 0.612 0.878 -1.000"}
{"mode": "val", "epoch": 30, "iter": 63, "lr": 5e-05, "memory": 6616, "data_time": 0.04513, "loss_rpn_cls": 0.01032, "loss_rpn_bbox": 0.03697, "loss_cls": 0.05597, "acc": 97.8776, "loss_bbox": 0.12409, "loss": 0.22736, "time": 0.28349}
