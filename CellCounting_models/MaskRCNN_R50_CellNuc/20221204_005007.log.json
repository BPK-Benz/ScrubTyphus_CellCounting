{"env_info": "sys.platform: linux\nPython: 3.9.15 (main, Nov 24 2022, 14:31:59) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA RTX A4000\nCUDA_HOME: /opt/anaconda3\nNVCC: Cuda compilation tools, release 11.7, V11.7.99\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.13.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.7\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.5\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.0\nOpenCV: 4.6.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.7\nMMDetection: 2.26.0+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.5),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=300,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[25.526, 0.386, 52.85], std=[53.347, 9.402, 53.172], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n    dict(\n        type='RandomFlip',\n        flip_ratio=0.5,\n        direction=['horizontal', 'vertical']),\n    dict(\n        type='Normalize',\n        mean=[25.526, 0.386, 52.85],\n        std=[53.347, 9.402, 53.172],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n        meta_keys=('filename', 'ori_shape', 'img_shape', 'img_norm_cfg',\n                   'pad_shape', 'scale_factor'))\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1020, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=5,\n    workers_per_gpu=1,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/share/NAS/Benz_Cell/cellLabel-main/Coco_File/Cell_TrainNuc_April.json',\n        img_prefix='/share/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n                meta_keys=('filename', 'ori_shape', 'img_shape',\n                           'img_norm_cfg', 'pad_shape', 'scale_factor'))\n        ],\n        classes=('object', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/share/NAS/Benz_Cell/cellLabel-main/Coco_File/Cell_TestNuc_April.json',\n        img_prefix='/share/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('object', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/share/NAS/Benz_Cell/cellLabel-main/Coco_File/Cell_TestNuc_April.json',\n        img_prefix='/share/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('object', )))\nevaluation = dict(metric='bbox', interval=1, save_best='bbox_mAP')\noptimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=30)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained_models/mask_rcnn_r50_fpn_2x_coco_bbox_mAP-0.392__segm_mAP-0.354_20200505_003907-3e542a40.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('object', )\nimg_scale = (1020, 768)\nbase = '/share/NAS/Benz_Cell/cellLabel-main/'\ndevice = 'cuda'\nwork_dir = './work_dirs/New_OCT/MaskRCNN_R50_CellNuc'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1140889575, "exp_name": "mask_rcnn_r50_CellNucNo.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00099, "memory": 7293, "data_time": 1.13365, "loss_rpn_cls": 0.18469, "loss_rpn_bbox": 0.12706, "loss_cls": 0.38504, "acc": 80.73026, "loss_bbox": 0.62627, "loss_mask": 0.71543, "loss": 2.03848, "time": 1.72035}
{"mode": "val", "epoch": 1, "iter": 312, "lr": 0.00177, "bbox_mAP": 0.741, "bbox_mAP_50": 0.975, "bbox_mAP_75": 0.929, "bbox_mAP_s": 0.528, "bbox_mAP_m": 0.813, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.741 0.975 0.929 0.528 0.813 -1.000"}
{"mode": "val", "epoch": 1, "iter": 63, "lr": 0.00177, "memory": 7293, "data_time": 1.41306, "loss_rpn_cls": 0.01252, "loss_rpn_bbox": 0.05774, "loss_cls": 0.10487, "acc": 95.83085, "loss_bbox": 0.19051, "loss_mask": 0.13209, "loss": 0.49773, "time": 1.76677}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00277, "memory": 7293, "data_time": 1.04989, "loss_rpn_cls": 0.00852, "loss_rpn_bbox": 0.05627, "loss_cls": 0.09192, "acc": 96.3, "loss_bbox": 0.17708, "loss_mask": 0.12308, "loss": 0.45688, "time": 1.64183}
{"mode": "val", "epoch": 2, "iter": 312, "lr": 0.00355, "bbox_mAP": 0.751, "bbox_mAP_50": 0.977, "bbox_mAP_75": 0.942, "bbox_mAP_s": 0.621, "bbox_mAP_m": 0.828, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.751 0.977 0.942 0.621 0.828 -1.000"}
{"mode": "val", "epoch": 2, "iter": 63, "lr": 0.00355, "memory": 7293, "data_time": 1.3975, "loss_rpn_cls": 0.01105, "loss_rpn_bbox": 0.06151, "loss_cls": 0.08425, "acc": 96.6214, "loss_bbox": 0.17104, "loss_mask": 0.12268, "loss": 0.45053, "time": 1.75137}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00455, "memory": 7293, "data_time": 1.06061, "loss_rpn_cls": 0.00784, "loss_rpn_bbox": 0.05557, "loss_cls": 0.07499, "acc": 97.03516, "loss_bbox": 0.16094, "loss_mask": 0.11527, "loss": 0.41462, "time": 1.65525}
{"mode": "val", "epoch": 3, "iter": 312, "lr": 0.005, "bbox_mAP": 0.773, "bbox_mAP_50": 0.977, "bbox_mAP_75": 0.943, "bbox_mAP_s": 0.593, "bbox_mAP_m": 0.851, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.773 0.977 0.943 0.593 0.851 -1.000"}
{"mode": "val", "epoch": 3, "iter": 63, "lr": 0.005, "memory": 7293, "data_time": 1.46709, "loss_rpn_cls": 0.01023, "loss_rpn_bbox": 0.05035, "loss_cls": 0.07664, "acc": 96.95933, "loss_bbox": 0.15978, "loss_mask": 0.11595, "loss": 0.41295, "time": 1.82051}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.005, "memory": 7293, "data_time": 1.20268, "loss_rpn_cls": 0.0063, "loss_rpn_bbox": 0.05046, "loss_cls": 0.0683, "acc": 97.27695, "loss_bbox": 0.15424, "loss_mask": 0.11416, "loss": 0.39347, "time": 1.79323}
{"mode": "val", "epoch": 4, "iter": 312, "lr": 0.005, "bbox_mAP": 0.768, "bbox_mAP_50": 0.977, "bbox_mAP_75": 0.953, "bbox_mAP_s": 0.628, "bbox_mAP_m": 0.846, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.768 0.977 0.953 0.628 0.846 -1.000"}
{"mode": "val", "epoch": 4, "iter": 63, "lr": 0.005, "memory": 7293, "data_time": 1.50848, "loss_rpn_cls": 0.0111, "loss_rpn_bbox": 0.05581, "loss_cls": 0.07039, "acc": 97.1906, "loss_bbox": 0.16535, "loss_mask": 0.1155, "loss": 0.41816, "time": 1.86162}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.005, "memory": 7296, "data_time": 1.21717, "loss_rpn_cls": 0.00634, "loss_rpn_bbox": 0.04981, "loss_cls": 0.06182, "acc": 97.55, "loss_bbox": 0.14902, "loss_mask": 0.11211, "loss": 0.37911, "time": 1.81035}
{"mode": "val", "epoch": 5, "iter": 312, "lr": 0.005, "bbox_mAP": 0.782, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.945, "bbox_mAP_s": 0.602, "bbox_mAP_m": 0.859, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.782 0.978 0.945 0.602 0.859 -1.000"}
{"mode": "val", "epoch": 5, "iter": 63, "lr": 0.005, "memory": 7296, "data_time": 1.49564, "loss_rpn_cls": 0.01127, "loss_rpn_bbox": 0.05192, "loss_cls": 0.06743, "acc": 97.36235, "loss_bbox": 0.14943, "loss_mask": 0.11281, "loss": 0.39285, "time": 1.84775}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.005, "memory": 7296, "data_time": 1.18681, "loss_rpn_cls": 0.00606, "loss_rpn_bbox": 0.04749, "loss_cls": 0.05904, "acc": 97.66758, "loss_bbox": 0.14458, "loss_mask": 0.10968, "loss": 0.36686, "time": 1.78041}
{"mode": "val", "epoch": 6, "iter": 312, "lr": 0.005, "bbox_mAP": 0.784, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.655, "bbox_mAP_m": 0.862, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.784 0.978 0.954 0.655 0.862 -1.000"}
{"mode": "val", "epoch": 6, "iter": 63, "lr": 0.005, "memory": 7296, "data_time": 1.55467, "loss_rpn_cls": 0.01002, "loss_rpn_bbox": 0.04579, "loss_cls": 0.06417, "acc": 97.40141, "loss_bbox": 0.14573, "loss_mask": 0.11073, "loss": 0.37644, "time": 1.90751}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.005, "memory": 7296, "data_time": 1.21747, "loss_rpn_cls": 0.00577, "loss_rpn_bbox": 0.04444, "loss_cls": 0.05531, "acc": 97.78906, "loss_bbox": 0.13821, "loss_mask": 0.10887, "loss": 0.35261, "time": 1.8123}
{"mode": "val", "epoch": 7, "iter": 312, "lr": 0.005, "bbox_mAP": 0.765, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.953, "bbox_mAP_s": 0.576, "bbox_mAP_m": 0.843, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.765 0.978 0.953 0.576 0.843 -1.000"}
{"mode": "val", "epoch": 7, "iter": 63, "lr": 0.005, "memory": 7296, "data_time": 1.5571, "loss_rpn_cls": 0.0102, "loss_rpn_bbox": 0.04731, "loss_cls": 0.06367, "acc": 97.50682, "loss_bbox": 0.15192, "loss_mask": 0.1105, "loss": 0.38359, "time": 1.91079}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.005, "memory": 7296, "data_time": 1.2654, "loss_rpn_cls": 0.00503, "loss_rpn_bbox": 0.04376, "loss_cls": 0.05614, "acc": 97.76797, "loss_bbox": 0.13694, "loss_mask": 0.10867, "loss": 0.35053, "time": 1.86261}
{"mode": "val", "epoch": 8, "iter": 312, "lr": 0.005, "bbox_mAP": 0.79, "bbox_mAP_50": 0.987, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.661, "bbox_mAP_m": 0.872, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.790 0.987 0.954 0.661 0.872 -1.000"}
{"mode": "val", "epoch": 8, "iter": 63, "lr": 0.005, "memory": 7296, "data_time": 1.50343, "loss_rpn_cls": 0.00991, "loss_rpn_bbox": 0.04481, "loss_cls": 0.06615, "acc": 97.40141, "loss_bbox": 0.14545, "loss_mask": 0.1108, "loss": 0.37712, "time": 1.85573}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.005, "memory": 7296, "data_time": 1.17843, "loss_rpn_cls": 0.00543, "loss_rpn_bbox": 0.04273, "loss_cls": 0.054, "acc": 97.84648, "loss_bbox": 0.1344, "loss_mask": 0.10726, "loss": 0.34382, "time": 1.77214}
{"mode": "val", "epoch": 9, "iter": 312, "lr": 0.005, "bbox_mAP": 0.778, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.624, "bbox_mAP_m": 0.856, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.778 0.978 0.954 0.624 0.856 -1.000"}
{"mode": "val", "epoch": 9, "iter": 63, "lr": 0.005, "memory": 7296, "data_time": 1.51974, "loss_rpn_cls": 0.01006, "loss_rpn_bbox": 0.04311, "loss_cls": 0.06044, "acc": 97.65873, "loss_bbox": 0.14373, "loss_mask": 0.10943, "loss": 0.36677, "time": 1.87456}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.005, "memory": 7296, "data_time": 1.23856, "loss_rpn_cls": 0.00459, "loss_rpn_bbox": 0.04193, "loss_cls": 0.05305, "acc": 97.9082, "loss_bbox": 0.13507, "loss_mask": 0.10619, "loss": 0.34083, "time": 1.83456}
{"mode": "val", "epoch": 10, "iter": 312, "lr": 0.005, "bbox_mAP": 0.784, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.955, "bbox_mAP_s": 0.601, "bbox_mAP_m": 0.864, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.784 0.978 0.955 0.601 0.864 -1.000"}
{"mode": "val", "epoch": 10, "iter": 63, "lr": 0.005, "memory": 7296, "data_time": 1.63741, "loss_rpn_cls": 0.0088, "loss_rpn_bbox": 0.04376, "loss_cls": 0.0564, "acc": 97.7753, "loss_bbox": 0.14369, "loss_mask": 0.10806, "loss": 0.36073, "time": 1.98915}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.005, "memory": 7296, "data_time": 1.35907, "loss_rpn_cls": 0.00495, "loss_rpn_bbox": 0.0423, "loss_cls": 0.05294, "acc": 97.8918, "loss_bbox": 0.12949, "loss_mask": 0.10557, "loss": 0.33525, "time": 1.95834}
{"mode": "val", "epoch": 11, "iter": 312, "lr": 0.005, "bbox_mAP": 0.774, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.548, "bbox_mAP_m": 0.853, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.774 0.978 0.954 0.548 0.853 -1.000"}
{"mode": "val", "epoch": 11, "iter": 63, "lr": 0.005, "memory": 7296, "data_time": 1.63399, "loss_rpn_cls": 0.01103, "loss_rpn_bbox": 0.05052, "loss_cls": 0.05742, "acc": 97.79204, "loss_bbox": 0.13796, "loss_mask": 0.10566, "loss": 0.3626, "time": 1.98842}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.005, "memory": 7296, "data_time": 1.35331, "loss_rpn_cls": 0.00488, "loss_rpn_bbox": 0.04135, "loss_cls": 0.05117, "acc": 97.99375, "loss_bbox": 0.12796, "loss_mask": 0.10555, "loss": 0.33091, "time": 1.9551}
{"mode": "val", "epoch": 12, "iter": 312, "lr": 0.005, "bbox_mAP": 0.771, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.594, "bbox_mAP_m": 0.85, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.771 0.978 0.954 0.594 0.850 -1.000"}
{"mode": "val", "epoch": 12, "iter": 63, "lr": 0.005, "memory": 7296, "data_time": 1.61084, "loss_rpn_cls": 0.01043, "loss_rpn_bbox": 0.04675, "loss_cls": 0.06306, "acc": 97.48202, "loss_bbox": 0.13794, "loss_mask": 0.1074, "loss": 0.36559, "time": 1.96288}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.005, "memory": 7296, "data_time": 1.35308, "loss_rpn_cls": 0.00471, "loss_rpn_bbox": 0.04067, "loss_cls": 0.04898, "acc": 98.07031, "loss_bbox": 0.1253, "loss_mask": 0.10319, "loss": 0.32285, "time": 1.95729}
{"mode": "val", "epoch": 13, "iter": 312, "lr": 0.005, "bbox_mAP": 0.781, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.65, "bbox_mAP_m": 0.861, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.781 0.978 0.954 0.650 0.861 -1.000"}
{"mode": "val", "epoch": 13, "iter": 63, "lr": 0.005, "memory": 7296, "data_time": 1.66956, "loss_rpn_cls": 0.00992, "loss_rpn_bbox": 0.04523, "loss_cls": 0.06315, "acc": 97.54464, "loss_bbox": 0.13815, "loss_mask": 0.10594, "loss": 0.3624, "time": 2.02465}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.005, "memory": 7296, "data_time": 1.32232, "loss_rpn_cls": 0.00406, "loss_rpn_bbox": 0.0411, "loss_cls": 0.05144, "acc": 97.98555, "loss_bbox": 0.12852, "loss_mask": 0.10461, "loss": 0.32973, "time": 1.92452}
{"mode": "val", "epoch": 14, "iter": 312, "lr": 0.005, "bbox_mAP": 0.789, "bbox_mAP_50": 0.987, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.659, "bbox_mAP_m": 0.872, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.789 0.987 0.954 0.659 0.872 -1.000"}
{"mode": "val", "epoch": 14, "iter": 63, "lr": 0.005, "memory": 7296, "data_time": 1.58082, "loss_rpn_cls": 0.01019, "loss_rpn_bbox": 0.04377, "loss_cls": 0.06189, "acc": 97.61595, "loss_bbox": 0.13336, "loss_mask": 0.106, "loss": 0.3552, "time": 1.93336}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.005, "memory": 7296, "data_time": 1.32622, "loss_rpn_cls": 0.00474, "loss_rpn_bbox": 0.03951, "loss_cls": 0.04761, "acc": 98.15781, "loss_bbox": 0.12334, "loss_mask": 0.1031, "loss": 0.31829, "time": 1.93186}
{"mode": "val", "epoch": 15, "iter": 312, "lr": 0.005, "bbox_mAP": 0.788, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.955, "bbox_mAP_s": 0.648, "bbox_mAP_m": 0.869, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.788 0.978 0.955 0.648 0.869 -1.000"}
{"mode": "val", "epoch": 15, "iter": 63, "lr": 0.005, "memory": 7296, "data_time": 1.63833, "loss_rpn_cls": 0.01027, "loss_rpn_bbox": 0.04208, "loss_cls": 0.06194, "acc": 97.54588, "loss_bbox": 0.1363, "loss_mask": 0.1093, "loss": 0.35989, "time": 1.99778}
{"mode": "train", "epoch": 16, "iter": 100, "lr": 0.005, "memory": 7296, "data_time": 1.34819, "loss_rpn_cls": 0.00468, "loss_rpn_bbox": 0.04026, "loss_cls": 0.05122, "acc": 97.9918, "loss_bbox": 0.12369, "loss_mask": 0.10175, "loss": 0.32161, "time": 1.95695}
{"mode": "val", "epoch": 16, "iter": 312, "lr": 0.005, "bbox_mAP": 0.778, "bbox_mAP_50": 0.987, "bbox_mAP_75": 0.955, "bbox_mAP_s": 0.669, "bbox_mAP_m": 0.86, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.778 0.987 0.955 0.669 0.860 -1.000"}
{"mode": "val", "epoch": 16, "iter": 63, "lr": 0.005, "memory": 7296, "data_time": 1.6075, "loss_rpn_cls": 0.01086, "loss_rpn_bbox": 0.04313, "loss_cls": 0.06267, "acc": 97.55704, "loss_bbox": 0.14068, "loss_mask": 0.10623, "loss": 0.36358, "time": 1.96325}
{"mode": "train", "epoch": 17, "iter": 100, "lr": 0.0005, "memory": 7296, "data_time": 1.34507, "loss_rpn_cls": 0.00403, "loss_rpn_bbox": 0.03553, "loss_cls": 0.0484, "acc": 98.08203, "loss_bbox": 0.11764, "loss_mask": 0.10282, "loss": 0.30842, "time": 1.95553}
{"mode": "val", "epoch": 17, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.792, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.955, "bbox_mAP_s": 0.623, "bbox_mAP_m": 0.874, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.792 0.978 0.955 0.623 0.874 -1.000"}
{"mode": "val", "epoch": 17, "iter": 63, "lr": 0.0005, "memory": 7296, "data_time": 1.61003, "loss_rpn_cls": 0.00935, "loss_rpn_bbox": 0.03761, "loss_cls": 0.05743, "acc": 97.79886, "loss_bbox": 0.12685, "loss_mask": 0.10537, "loss": 0.33661, "time": 1.96937}
{"mode": "train", "epoch": 18, "iter": 100, "lr": 0.0005, "memory": 7296, "data_time": 1.32998, "loss_rpn_cls": 0.0032, "loss_rpn_bbox": 0.03452, "loss_cls": 0.04543, "acc": 98.23008, "loss_bbox": 0.11408, "loss_mask": 0.1017, "loss": 0.29893, "time": 1.93576}
{"mode": "val", "epoch": 18, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.794, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.955, "bbox_mAP_s": 0.636, "bbox_mAP_m": 0.875, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.794 0.978 0.955 0.636 0.875 -1.000"}
{"mode": "val", "epoch": 18, "iter": 63, "lr": 0.0005, "memory": 7296, "data_time": 1.60544, "loss_rpn_cls": 0.00898, "loss_rpn_bbox": 0.03741, "loss_cls": 0.05679, "acc": 97.84784, "loss_bbox": 0.1275, "loss_mask": 0.10626, "loss": 0.33694, "time": 1.9602}
{"mode": "train", "epoch": 19, "iter": 100, "lr": 0.0005, "memory": 7296, "data_time": 1.28206, "loss_rpn_cls": 0.00326, "loss_rpn_bbox": 0.03419, "loss_cls": 0.04429, "acc": 98.3, "loss_bbox": 0.11239, "loss_mask": 0.10049, "loss": 0.29462, "time": 1.89023}
{"mode": "val", "epoch": 19, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.618, "bbox_mAP_m": 0.876, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.954 0.618 0.876 -1.000"}
{"mode": "val", "epoch": 19, "iter": 63, "lr": 0.0005, "memory": 7296, "data_time": 1.63196, "loss_rpn_cls": 0.0102, "loss_rpn_bbox": 0.03734, "loss_cls": 0.0554, "acc": 97.88132, "loss_bbox": 0.12603, "loss_mask": 0.10567, "loss": 0.33464, "time": 1.98886}
{"mode": "train", "epoch": 20, "iter": 100, "lr": 0.0005, "memory": 7296, "data_time": 1.30965, "loss_rpn_cls": 0.00278, "loss_rpn_bbox": 0.03345, "loss_cls": 0.04268, "acc": 98.33398, "loss_bbox": 0.11204, "loss_mask": 0.10012, "loss": 0.29107, "time": 1.91578}
{"mode": "val", "epoch": 20, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.794, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.655, "bbox_mAP_m": 0.875, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.794 0.978 0.954 0.655 0.875 -1.000"}
{"mode": "val", "epoch": 20, "iter": 63, "lr": 0.0005, "memory": 7296, "data_time": 1.62419, "loss_rpn_cls": 0.00845, "loss_rpn_bbox": 0.03714, "loss_cls": 0.0561, "acc": 97.86954, "loss_bbox": 0.12619, "loss_mask": 0.10607, "loss": 0.33396, "time": 1.98044}
{"mode": "train", "epoch": 21, "iter": 100, "lr": 0.0005, "memory": 7296, "data_time": 1.42249, "loss_rpn_cls": 0.00337, "loss_rpn_bbox": 0.03408, "loss_cls": 0.04286, "acc": 98.35117, "loss_bbox": 0.11186, "loss_mask": 0.10123, "loss": 0.29339, "time": 2.03402}
{"mode": "val", "epoch": 21, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.65, "bbox_mAP_m": 0.876, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.954 0.650 0.876 -1.000"}
{"mode": "val", "epoch": 21, "iter": 63, "lr": 0.0005, "memory": 7296, "data_time": 1.80544, "loss_rpn_cls": 0.00968, "loss_rpn_bbox": 0.03766, "loss_cls": 0.0546, "acc": 97.91915, "loss_bbox": 0.12527, "loss_mask": 0.10551, "loss": 0.33272, "time": 2.17024}
{"mode": "train", "epoch": 22, "iter": 100, "lr": 0.0005, "memory": 7296, "data_time": 1.48522, "loss_rpn_cls": 0.00382, "loss_rpn_bbox": 0.03395, "loss_cls": 0.04302, "acc": 98.36016, "loss_bbox": 0.11057, "loss_mask": 0.10105, "loss": 0.2924, "time": 2.10109}
{"mode": "val", "epoch": 22, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.794, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.649, "bbox_mAP_m": 0.875, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.794 0.978 0.954 0.649 0.875 -1.000"}
{"mode": "val", "epoch": 22, "iter": 63, "lr": 0.0005, "memory": 7296, "data_time": 1.86659, "loss_rpn_cls": 0.00992, "loss_rpn_bbox": 0.03742, "loss_cls": 0.05526, "acc": 97.85714, "loss_bbox": 0.1258, "loss_mask": 0.10567, "loss": 0.33407, "time": 2.22984}
{"mode": "train", "epoch": 23, "iter": 100, "lr": 5e-05, "memory": 7296, "data_time": 1.48498, "loss_rpn_cls": 0.00365, "loss_rpn_bbox": 0.03377, "loss_cls": 0.04348, "acc": 98.32148, "loss_bbox": 0.10972, "loss_mask": 0.09958, "loss": 0.29021, "time": 2.0979}
{"mode": "val", "epoch": 23, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.955, "bbox_mAP_s": 0.636, "bbox_mAP_m": 0.876, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.955 0.636 0.876 -1.000"}
{"mode": "val", "epoch": 23, "iter": 63, "lr": 5e-05, "memory": 7296, "data_time": 1.78224, "loss_rpn_cls": 0.00976, "loss_rpn_bbox": 0.03699, "loss_cls": 0.05631, "acc": 97.86396, "loss_bbox": 0.12477, "loss_mask": 0.10495, "loss": 0.33277, "time": 2.14886}
{"mode": "train", "epoch": 24, "iter": 100, "lr": 5e-05, "memory": 7296, "data_time": 1.51074, "loss_rpn_cls": 0.00339, "loss_rpn_bbox": 0.03391, "loss_cls": 0.04346, "acc": 98.31094, "loss_bbox": 0.11098, "loss_mask": 0.10045, "loss": 0.2922, "time": 2.13171}
{"mode": "val", "epoch": 24, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.955, "bbox_mAP_s": 0.636, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.955 0.636 0.877 -1.000"}
{"mode": "val", "epoch": 24, "iter": 63, "lr": 5e-05, "memory": 7296, "data_time": 1.76607, "loss_rpn_cls": 0.00917, "loss_rpn_bbox": 0.03672, "loss_cls": 0.0551, "acc": 97.90737, "loss_bbox": 0.12448, "loss_mask": 0.10481, "loss": 0.33028, "time": 2.13018}
{"mode": "train", "epoch": 25, "iter": 100, "lr": 5e-05, "memory": 7296, "data_time": 1.54615, "loss_rpn_cls": 0.00418, "loss_rpn_bbox": 0.03379, "loss_cls": 0.04257, "acc": 98.37539, "loss_bbox": 0.11022, "loss_mask": 0.10032, "loss": 0.29108, "time": 2.16662}
{"mode": "val", "epoch": 25, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.955, "bbox_mAP_s": 0.636, "bbox_mAP_m": 0.876, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.955 0.636 0.876 -1.000"}
{"mode": "val", "epoch": 25, "iter": 63, "lr": 5e-05, "memory": 7296, "data_time": 1.86614, "loss_rpn_cls": 0.01009, "loss_rpn_bbox": 0.03713, "loss_cls": 0.05534, "acc": 97.8807, "loss_bbox": 0.12408, "loss_mask": 0.10467, "loss": 0.33131, "time": 2.23315}
{"mode": "train", "epoch": 26, "iter": 100, "lr": 5e-05, "memory": 7296, "data_time": 1.52311, "loss_rpn_cls": 0.00313, "loss_rpn_bbox": 0.03394, "loss_cls": 0.04246, "acc": 98.38086, "loss_bbox": 0.11009, "loss_mask": 0.10016, "loss": 0.28978, "time": 2.13921}
{"mode": "val", "epoch": 26, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.955, "bbox_mAP_s": 0.636, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.955 0.636 0.877 -1.000"}
{"mode": "val", "epoch": 26, "iter": 63, "lr": 5e-05, "memory": 7296, "data_time": 1.89617, "loss_rpn_cls": 0.00897, "loss_rpn_bbox": 0.03674, "loss_cls": 0.05584, "acc": 97.859, "loss_bbox": 0.12363, "loss_mask": 0.10414, "loss": 0.32931, "time": 2.26479}
{"mode": "train", "epoch": 27, "iter": 100, "lr": 5e-05, "memory": 7296, "data_time": 1.50997, "loss_rpn_cls": 0.00333, "loss_rpn_bbox": 0.03372, "loss_cls": 0.04396, "acc": 98.32266, "loss_bbox": 0.11108, "loss_mask": 0.10073, "loss": 0.29283, "time": 2.12424}
{"mode": "val", "epoch": 27, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.955, "bbox_mAP_s": 0.638, "bbox_mAP_m": 0.876, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.955 0.638 0.876 -1.000"}
{"mode": "val", "epoch": 27, "iter": 63, "lr": 5e-05, "memory": 7296, "data_time": 1.67258, "loss_rpn_cls": 0.00946, "loss_rpn_bbox": 0.03682, "loss_cls": 0.05675, "acc": 97.81994, "loss_bbox": 0.12328, "loss_mask": 0.10463, "loss": 0.33094, "time": 2.03047}
{"mode": "train", "epoch": 28, "iter": 100, "lr": 5e-05, "memory": 7296, "data_time": 1.26534, "loss_rpn_cls": 0.00285, "loss_rpn_bbox": 0.03308, "loss_cls": 0.0435, "acc": 98.3457, "loss_bbox": 0.10918, "loss_mask": 0.09871, "loss": 0.28732, "time": 1.86956}
{"mode": "val", "epoch": 28, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.638, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.954 0.638 0.877 -1.000"}
{"mode": "val", "epoch": 28, "iter": 63, "lr": 5e-05, "memory": 7296, "data_time": 1.64557, "loss_rpn_cls": 0.00965, "loss_rpn_bbox": 0.03666, "loss_cls": 0.05631, "acc": 97.84226, "loss_bbox": 0.12471, "loss_mask": 0.10574, "loss": 0.33307, "time": 2.00005}
{"mode": "train", "epoch": 29, "iter": 100, "lr": 5e-05, "memory": 7296, "data_time": 1.33552, "loss_rpn_cls": 0.00326, "loss_rpn_bbox": 0.03324, "loss_cls": 0.04251, "acc": 98.37031, "loss_bbox": 0.10698, "loss_mask": 0.0981, "loss": 0.28411, "time": 1.94085}
{"mode": "val", "epoch": 29, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.955, "bbox_mAP_s": 0.638, "bbox_mAP_m": 0.876, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.955 0.638 0.876 -1.000"}
{"mode": "val", "epoch": 29, "iter": 63, "lr": 5e-05, "memory": 7296, "data_time": 1.61848, "loss_rpn_cls": 0.00916, "loss_rpn_bbox": 0.03698, "loss_cls": 0.05502, "acc": 97.87264, "loss_bbox": 0.12377, "loss_mask": 0.10517, "loss": 0.33011, "time": 1.97231}
{"mode": "train", "epoch": 30, "iter": 100, "lr": 5e-05, "memory": 7296, "data_time": 1.26858, "loss_rpn_cls": 0.00314, "loss_rpn_bbox": 0.03349, "loss_cls": 0.04308, "acc": 98.36641, "loss_bbox": 0.10894, "loss_mask": 0.09964, "loss": 0.28829, "time": 1.8715}
{"mode": "val", "epoch": 30, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.636, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.954 0.636 0.877 -1.000"}
{"mode": "val", "epoch": 30, "iter": 63, "lr": 5e-05, "memory": 7296, "data_time": 1.60052, "loss_rpn_cls": 0.00867, "loss_rpn_bbox": 0.03677, "loss_cls": 0.05585, "acc": 97.89683, "loss_bbox": 0.12485, "loss_mask": 0.10555, "loss": 0.33168, "time": 1.95431}
