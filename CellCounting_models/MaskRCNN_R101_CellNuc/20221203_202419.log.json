{"env_info": "sys.platform: linux\nPython: 3.9.15 (main, Nov 24 2022, 14:31:59) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA RTX A4000\nCUDA_HOME: /opt/anaconda3\nNVCC: Cuda compilation tools, release 11.7, V11.7.99\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.13.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.7\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.5\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.0\nOpenCV: 4.6.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.7\nMMDetection: 2.26.0+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.5),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=300,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[25.526, 0.386, 52.85], std=[53.347, 9.402, 53.172], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n    dict(\n        type='RandomFlip',\n        flip_ratio=0.5,\n        direction=['horizontal', 'vertical']),\n    dict(\n        type='Normalize',\n        mean=[25.526, 0.386, 52.85],\n        std=[53.347, 9.402, 53.172],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n        meta_keys=('filename', 'ori_shape', 'img_shape', 'img_norm_cfg',\n                   'pad_shape', 'scale_factor'))\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1020, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=5,\n    workers_per_gpu=1,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/share/NAS/Benz_Cell/cellLabel-main/Coco_File/Cell_TrainNuc_April.json',\n        img_prefix='/share/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1020, 768), keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                flip_ratio=0.5,\n                direction=['horizontal', 'vertical']),\n            dict(\n                type='Normalize',\n                mean=[25.526, 0.386, 52.85],\n                std=[53.347, 9.402, 53.172],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n                meta_keys=('filename', 'ori_shape', 'img_shape',\n                           'img_norm_cfg', 'pad_shape', 'scale_factor'))\n        ],\n        classes=('object', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/share/NAS/Benz_Cell/cellLabel-main/Coco_File/Cell_TestNuc_April.json',\n        img_prefix='/share/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('object', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/share/NAS/Benz_Cell/cellLabel-main/Coco_File/Cell_TestNuc_April.json',\n        img_prefix='/share/NAS/Benz_Cell/cellLabel-main/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1020, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomFlip',\n                        flip_ratio=0.5,\n                        direction=['horizontal', 'vertical']),\n                    dict(\n                        type='Normalize',\n                        mean=[25.526, 0.386, 52.85],\n                        std=[53.347, 9.402, 53.172],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('object', )))\nevaluation = dict(metric='bbox', interval=1, save_best='bbox_mAP')\noptimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=30)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained_models/mask_rcnn_r101_fpn_2x_coco_bbox_mAP-0.408__segm_mAP-0.366_20200505_071027-14b391c7.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('object', )\nimg_scale = (1020, 768)\nbase = '/share/NAS/Benz_Cell/cellLabel-main/'\ndevice = 'cuda'\nwork_dir = './work_dirs/New_OCT/MaskRCNN_R101_CellNuc'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 959000815, "exp_name": "mask_rcnn_r101_CellNucNo.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00099, "memory": 10570, "data_time": 0.90392, "loss_rpn_cls": 0.13604, "loss_rpn_bbox": 0.10666, "loss_cls": 0.35231, "acc": 82.46162, "loss_bbox": 0.54682, "loss_mask": 0.80737, "loss": 1.9492, "time": 1.72899}
{"mode": "val", "epoch": 1, "iter": 312, "lr": 0.00177, "bbox_mAP": 0.744, "bbox_mAP_50": 0.975, "bbox_mAP_75": 0.928, "bbox_mAP_s": 0.569, "bbox_mAP_m": 0.818, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.744 0.975 0.928 0.569 0.818 -1.000"}
{"mode": "val", "epoch": 1, "iter": 63, "lr": 0.00177, "memory": 10570, "data_time": 1.3541, "loss_rpn_cls": 0.01224, "loss_rpn_bbox": 0.05818, "loss_cls": 0.11358, "acc": 95.47805, "loss_bbox": 0.18478, "loss_mask": 0.13272, "loss": 0.50149, "time": 1.75712}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00277, "memory": 10573, "data_time": 0.88168, "loss_rpn_cls": 0.00895, "loss_rpn_bbox": 0.05533, "loss_cls": 0.08967, "acc": 96.45469, "loss_bbox": 0.17552, "loss_mask": 0.12442, "loss": 0.45389, "time": 1.70657}
{"mode": "val", "epoch": 2, "iter": 312, "lr": 0.00355, "bbox_mAP": 0.764, "bbox_mAP_50": 0.977, "bbox_mAP_75": 0.942, "bbox_mAP_s": 0.618, "bbox_mAP_m": 0.839, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.764 0.977 0.942 0.618 0.839 -1.000"}
{"mode": "val", "epoch": 2, "iter": 63, "lr": 0.00355, "memory": 10573, "data_time": 1.38369, "loss_rpn_cls": 0.00882, "loss_rpn_bbox": 0.05795, "loss_cls": 0.08035, "acc": 96.80556, "loss_bbox": 0.16507, "loss_mask": 0.12102, "loss": 0.43321, "time": 1.78783}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00455, "memory": 10573, "data_time": 0.85525, "loss_rpn_cls": 0.00712, "loss_rpn_bbox": 0.05369, "loss_cls": 0.07245, "acc": 97.08203, "loss_bbox": 0.15874, "loss_mask": 0.11709, "loss": 0.4091, "time": 1.67897}
{"mode": "val", "epoch": 3, "iter": 312, "lr": 0.005, "bbox_mAP": 0.772, "bbox_mAP_50": 0.977, "bbox_mAP_75": 0.943, "bbox_mAP_s": 0.56, "bbox_mAP_m": 0.847, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.772 0.977 0.943 0.560 0.847 -1.000"}
{"mode": "val", "epoch": 3, "iter": 63, "lr": 0.005, "memory": 10573, "data_time": 1.38435, "loss_rpn_cls": 0.01084, "loss_rpn_bbox": 0.05197, "loss_cls": 0.0676, "acc": 97.43056, "loss_bbox": 0.16046, "loss_mask": 0.11538, "loss": 0.40624, "time": 1.78951}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.005, "memory": 10573, "data_time": 0.88251, "loss_rpn_cls": 0.00677, "loss_rpn_bbox": 0.05315, "loss_cls": 0.06809, "acc": 97.3168, "loss_bbox": 0.15185, "loss_mask": 0.11323, "loss": 0.3931, "time": 1.70863}
{"mode": "val", "epoch": 4, "iter": 312, "lr": 0.005, "bbox_mAP": 0.777, "bbox_mAP_50": 0.977, "bbox_mAP_75": 0.944, "bbox_mAP_s": 0.645, "bbox_mAP_m": 0.854, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.777 0.977 0.944 0.645 0.854 -1.000"}
{"mode": "val", "epoch": 4, "iter": 63, "lr": 0.005, "memory": 10573, "data_time": 1.37936, "loss_rpn_cls": 0.0092, "loss_rpn_bbox": 0.04723, "loss_cls": 0.06812, "acc": 97.30593, "loss_bbox": 0.15063, "loss_mask": 0.11269, "loss": 0.38788, "time": 1.7821}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.005, "memory": 10573, "data_time": 0.87793, "loss_rpn_cls": 0.00596, "loss_rpn_bbox": 0.0497, "loss_cls": 0.06004, "acc": 97.62461, "loss_bbox": 0.14748, "loss_mask": 0.11268, "loss": 0.37587, "time": 1.70877}
{"mode": "val", "epoch": 5, "iter": 312, "lr": 0.005, "bbox_mAP": 0.78, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.632, "bbox_mAP_m": 0.857, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.780 0.978 0.954 0.632 0.857 -1.000"}
{"mode": "val", "epoch": 5, "iter": 63, "lr": 0.005, "memory": 10573, "data_time": 1.358, "loss_rpn_cls": 0.0082, "loss_rpn_bbox": 0.04989, "loss_cls": 0.06511, "acc": 97.44792, "loss_bbox": 0.15033, "loss_mask": 0.11305, "loss": 0.38657, "time": 1.76199}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.005, "memory": 10573, "data_time": 0.84349, "loss_rpn_cls": 0.00481, "loss_rpn_bbox": 0.04493, "loss_cls": 0.05959, "acc": 97.6375, "loss_bbox": 0.14319, "loss_mask": 0.10892, "loss": 0.36143, "time": 1.6742}
{"mode": "val", "epoch": 6, "iter": 312, "lr": 0.005, "bbox_mAP": 0.784, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.66, "bbox_mAP_m": 0.863, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.784 0.978 0.954 0.660 0.863 -1.000"}
{"mode": "val", "epoch": 6, "iter": 63, "lr": 0.005, "memory": 10573, "data_time": 1.36427, "loss_rpn_cls": 0.00748, "loss_rpn_bbox": 0.04484, "loss_cls": 0.06263, "acc": 97.49318, "loss_bbox": 0.14129, "loss_mask": 0.10969, "loss": 0.36593, "time": 1.76963}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.005, "memory": 10573, "data_time": 0.83519, "loss_rpn_cls": 0.00494, "loss_rpn_bbox": 0.04406, "loss_cls": 0.06021, "acc": 97.60586, "loss_bbox": 0.13576, "loss_mask": 0.10529, "loss": 0.35026, "time": 1.66877}
{"mode": "val", "epoch": 7, "iter": 312, "lr": 0.005, "bbox_mAP": 0.785, "bbox_mAP_50": 0.977, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.642, "bbox_mAP_m": 0.862, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.785 0.977 0.954 0.642 0.862 -1.000"}
{"mode": "val", "epoch": 7, "iter": 63, "lr": 0.005, "memory": 10573, "data_time": 1.41332, "loss_rpn_cls": 0.00841, "loss_rpn_bbox": 0.05177, "loss_cls": 0.0675, "acc": 97.29539, "loss_bbox": 0.14444, "loss_mask": 0.10908, "loss": 0.3812, "time": 1.82355}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.005, "memory": 10573, "data_time": 0.94473, "loss_rpn_cls": 0.0056, "loss_rpn_bbox": 0.04508, "loss_cls": 0.05404, "acc": 97.86211, "loss_bbox": 0.13257, "loss_mask": 0.10664, "loss": 0.34393, "time": 1.78135}
{"mode": "val", "epoch": 8, "iter": 312, "lr": 0.005, "bbox_mAP": 0.776, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.64, "bbox_mAP_m": 0.856, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.776 0.978 0.954 0.640 0.856 -1.000"}
{"mode": "val", "epoch": 8, "iter": 63, "lr": 0.005, "memory": 10573, "data_time": 1.45729, "loss_rpn_cls": 0.0089, "loss_rpn_bbox": 0.04538, "loss_cls": 0.06318, "acc": 97.5155, "loss_bbox": 0.13924, "loss_mask": 0.10981, "loss": 0.36651, "time": 1.86744}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.005, "memory": 10573, "data_time": 0.95343, "loss_rpn_cls": 0.0051, "loss_rpn_bbox": 0.04318, "loss_cls": 0.05264, "acc": 97.91016, "loss_bbox": 0.13229, "loss_mask": 0.10694, "loss": 0.34016, "time": 1.79398}
{"mode": "val", "epoch": 9, "iter": 312, "lr": 0.005, "bbox_mAP": 0.79, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.607, "bbox_mAP_m": 0.869, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.790 0.978 0.954 0.607 0.869 -1.000"}
{"mode": "val", "epoch": 9, "iter": 63, "lr": 0.005, "memory": 10573, "data_time": 1.4432, "loss_rpn_cls": 0.00801, "loss_rpn_bbox": 0.04128, "loss_cls": 0.05939, "acc": 97.59611, "loss_bbox": 0.13699, "loss_mask": 0.10828, "loss": 0.35395, "time": 1.85489}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.005, "memory": 10573, "data_time": 0.95608, "loss_rpn_cls": 0.00457, "loss_rpn_bbox": 0.04107, "loss_cls": 0.05267, "acc": 97.93828, "loss_bbox": 0.12909, "loss_mask": 0.1042, "loss": 0.33159, "time": 1.79899}
{"mode": "val", "epoch": 10, "iter": 312, "lr": 0.005, "bbox_mAP": 0.773, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.953, "bbox_mAP_s": 0.648, "bbox_mAP_m": 0.853, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.773 0.978 0.953 0.648 0.853 -1.000"}
{"mode": "val", "epoch": 10, "iter": 63, "lr": 0.005, "memory": 10573, "data_time": 1.43151, "loss_rpn_cls": 0.00825, "loss_rpn_bbox": 0.04682, "loss_cls": 0.06908, "acc": 97.26625, "loss_bbox": 0.14162, "loss_mask": 0.10769, "loss": 0.37347, "time": 1.84043}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.005, "memory": 10573, "data_time": 0.91494, "loss_rpn_cls": 0.00451, "loss_rpn_bbox": 0.04005, "loss_cls": 0.05005, "acc": 98.02734, "loss_bbox": 0.12581, "loss_mask": 0.10281, "loss": 0.32324, "time": 1.75603}
{"mode": "val", "epoch": 11, "iter": 312, "lr": 0.005, "bbox_mAP": 0.78, "bbox_mAP_50": 0.987, "bbox_mAP_75": 0.953, "bbox_mAP_s": 0.646, "bbox_mAP_m": 0.862, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.780 0.987 0.953 0.646 0.862 -1.000"}
{"mode": "val", "epoch": 11, "iter": 63, "lr": 0.005, "memory": 10573, "data_time": 1.40436, "loss_rpn_cls": 0.00833, "loss_rpn_bbox": 0.04434, "loss_cls": 0.06175, "acc": 97.59735, "loss_bbox": 0.13881, "loss_mask": 0.10813, "loss": 0.36135, "time": 1.81663}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.005, "memory": 10573, "data_time": 0.87762, "loss_rpn_cls": 0.00402, "loss_rpn_bbox": 0.04021, "loss_cls": 0.04732, "acc": 98.16406, "loss_bbox": 0.12694, "loss_mask": 0.10353, "loss": 0.32202, "time": 1.71618}
{"mode": "val", "epoch": 12, "iter": 312, "lr": 0.005, "bbox_mAP": 0.786, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.701, "bbox_mAP_m": 0.866, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.786 0.978 0.954 0.701 0.866 -1.000"}
{"mode": "val", "epoch": 12, "iter": 63, "lr": 0.005, "memory": 10573, "data_time": 1.43317, "loss_rpn_cls": 0.00978, "loss_rpn_bbox": 0.0436, "loss_cls": 0.06206, "acc": 97.64447, "loss_bbox": 0.13561, "loss_mask": 0.10796, "loss": 0.35901, "time": 1.84255}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.005, "memory": 10573, "data_time": 0.94358, "loss_rpn_cls": 0.00439, "loss_rpn_bbox": 0.04041, "loss_cls": 0.04818, "acc": 98.13828, "loss_bbox": 0.12328, "loss_mask": 0.10195, "loss": 0.31822, "time": 1.78714}
{"mode": "val", "epoch": 13, "iter": 312, "lr": 0.005, "bbox_mAP": 0.775, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.663, "bbox_mAP_m": 0.854, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.775 0.978 0.954 0.663 0.854 -1.000"}
{"mode": "val", "epoch": 13, "iter": 63, "lr": 0.005, "memory": 10573, "data_time": 1.4287, "loss_rpn_cls": 0.0093, "loss_rpn_bbox": 0.04354, "loss_cls": 0.05873, "acc": 97.71205, "loss_bbox": 0.13915, "loss_mask": 0.10569, "loss": 0.35642, "time": 1.83899}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.005, "memory": 10573, "data_time": 0.88433, "loss_rpn_cls": 0.00385, "loss_rpn_bbox": 0.04145, "loss_cls": 0.04952, "acc": 98.03867, "loss_bbox": 0.1251, "loss_mask": 0.1011, "loss": 0.32103, "time": 1.72558}
{"mode": "val", "epoch": 14, "iter": 312, "lr": 0.005, "bbox_mAP": 0.782, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.955, "bbox_mAP_s": 0.667, "bbox_mAP_m": 0.862, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.782 0.978 0.955 0.667 0.862 -1.000"}
{"mode": "val", "epoch": 14, "iter": 63, "lr": 0.005, "memory": 10573, "data_time": 1.36096, "loss_rpn_cls": 0.00921, "loss_rpn_bbox": 0.04226, "loss_cls": 0.06117, "acc": 97.62711, "loss_bbox": 0.13703, "loss_mask": 0.10789, "loss": 0.35756, "time": 1.77411}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.005, "memory": 10573, "data_time": 0.84575, "loss_rpn_cls": 0.00394, "loss_rpn_bbox": 0.03922, "loss_cls": 0.04735, "acc": 98.18008, "loss_bbox": 0.12077, "loss_mask": 0.10081, "loss": 0.31209, "time": 1.68282}
{"mode": "val", "epoch": 15, "iter": 312, "lr": 0.005, "bbox_mAP": 0.779, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.953, "bbox_mAP_s": 0.687, "bbox_mAP_m": 0.859, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.779 0.978 0.953 0.687 0.859 -1.000"}
{"mode": "val", "epoch": 15, "iter": 63, "lr": 0.005, "memory": 10573, "data_time": 1.38333, "loss_rpn_cls": 0.00874, "loss_rpn_bbox": 0.04418, "loss_cls": 0.06097, "acc": 97.66121, "loss_bbox": 0.13772, "loss_mask": 0.11016, "loss": 0.36176, "time": 1.78641}
{"mode": "train", "epoch": 16, "iter": 100, "lr": 0.005, "memory": 10573, "data_time": 0.85618, "loss_rpn_cls": 0.00384, "loss_rpn_bbox": 0.03936, "loss_cls": 0.04456, "acc": 98.25547, "loss_bbox": 0.12059, "loss_mask": 0.10088, "loss": 0.30923, "time": 1.6919}
{"mode": "val", "epoch": 16, "iter": 312, "lr": 0.005, "bbox_mAP": 0.79, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.662, "bbox_mAP_m": 0.87, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.790 0.978 0.954 0.662 0.870 -1.000"}
{"mode": "val", "epoch": 16, "iter": 63, "lr": 0.005, "memory": 10573, "data_time": 1.38103, "loss_rpn_cls": 0.0091, "loss_rpn_bbox": 0.04145, "loss_cls": 0.05773, "acc": 97.7443, "loss_bbox": 0.13169, "loss_mask": 0.10508, "loss": 0.34506, "time": 1.78463}
{"mode": "train", "epoch": 17, "iter": 100, "lr": 0.0005, "memory": 10573, "data_time": 0.91518, "loss_rpn_cls": 0.00332, "loss_rpn_bbox": 0.0342, "loss_cls": 0.03951, "acc": 98.48008, "loss_bbox": 0.1111, "loss_mask": 0.09966, "loss": 0.28778, "time": 1.75607}
{"mode": "val", "epoch": 17, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.794, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.65, "bbox_mAP_m": 0.876, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.794 0.978 0.954 0.650 0.876 -1.000"}
{"mode": "val", "epoch": 17, "iter": 63, "lr": 0.0005, "memory": 10573, "data_time": 1.35524, "loss_rpn_cls": 0.00892, "loss_rpn_bbox": 0.03705, "loss_cls": 0.05784, "acc": 97.81684, "loss_bbox": 0.12568, "loss_mask": 0.10483, "loss": 0.33432, "time": 1.75845}
{"mode": "train", "epoch": 18, "iter": 100, "lr": 0.0005, "memory": 10573, "data_time": 0.80419, "loss_rpn_cls": 0.00285, "loss_rpn_bbox": 0.03272, "loss_cls": 0.04092, "acc": 98.44023, "loss_bbox": 0.10742, "loss_mask": 0.09792, "loss": 0.28181, "time": 1.6407}
{"mode": "val", "epoch": 18, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.666, "bbox_mAP_m": 0.876, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.954 0.666 0.876 -1.000"}
{"mode": "val", "epoch": 18, "iter": 63, "lr": 0.0005, "memory": 10573, "data_time": 1.35989, "loss_rpn_cls": 0.0086, "loss_rpn_bbox": 0.03713, "loss_cls": 0.05611, "acc": 97.90737, "loss_bbox": 0.12468, "loss_mask": 0.10418, "loss": 0.3307, "time": 1.76339}
{"mode": "train", "epoch": 19, "iter": 100, "lr": 0.0005, "memory": 10573, "data_time": 0.84079, "loss_rpn_cls": 0.00305, "loss_rpn_bbox": 0.0325, "loss_cls": 0.04028, "acc": 98.47188, "loss_bbox": 0.10783, "loss_mask": 0.0983, "loss": 0.28197, "time": 1.67675}
{"mode": "val", "epoch": 19, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.797, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.955, "bbox_mAP_s": 0.669, "bbox_mAP_m": 0.878, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.797 0.978 0.955 0.669 0.878 -1.000"}
{"mode": "val", "epoch": 19, "iter": 63, "lr": 0.0005, "memory": 10573, "data_time": 1.35476, "loss_rpn_cls": 0.00834, "loss_rpn_bbox": 0.03667, "loss_cls": 0.055, "acc": 97.84784, "loss_bbox": 0.12379, "loss_mask": 0.10396, "loss": 0.32776, "time": 1.75765}
{"mode": "train", "epoch": 20, "iter": 100, "lr": 0.0005, "memory": 10573, "data_time": 0.81479, "loss_rpn_cls": 0.00303, "loss_rpn_bbox": 0.0324, "loss_cls": 0.04015, "acc": 98.49297, "loss_bbox": 0.10639, "loss_mask": 0.09719, "loss": 0.27916, "time": 1.6498}
{"mode": "val", "epoch": 20, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.632, "bbox_mAP_m": 0.875, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.954 0.632 0.875 -1.000"}
{"mode": "val", "epoch": 20, "iter": 63, "lr": 0.0005, "memory": 10573, "data_time": 1.36214, "loss_rpn_cls": 0.00799, "loss_rpn_bbox": 0.03709, "loss_cls": 0.05787, "acc": 97.81498, "loss_bbox": 0.12606, "loss_mask": 0.10454, "loss": 0.33355, "time": 1.76419}
{"mode": "train", "epoch": 21, "iter": 100, "lr": 0.0005, "memory": 10573, "data_time": 0.88358, "loss_rpn_cls": 0.00293, "loss_rpn_bbox": 0.03289, "loss_cls": 0.03799, "acc": 98.61211, "loss_bbox": 0.10525, "loss_mask": 0.09728, "loss": 0.27634, "time": 1.72418}
{"mode": "val", "epoch": 21, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.795, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.955, "bbox_mAP_s": 0.637, "bbox_mAP_m": 0.876, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.795 0.978 0.955 0.637 0.876 -1.000"}
{"mode": "val", "epoch": 21, "iter": 63, "lr": 0.0005, "memory": 10573, "data_time": 1.34073, "loss_rpn_cls": 0.00832, "loss_rpn_bbox": 0.0371, "loss_cls": 0.05556, "acc": 97.89311, "loss_bbox": 0.12393, "loss_mask": 0.10376, "loss": 0.32867, "time": 1.74422}
{"mode": "train", "epoch": 22, "iter": 100, "lr": 0.0005, "memory": 10573, "data_time": 0.81607, "loss_rpn_cls": 0.00276, "loss_rpn_bbox": 0.03219, "loss_cls": 0.03921, "acc": 98.53086, "loss_bbox": 0.10405, "loss_mask": 0.09718, "loss": 0.27538, "time": 1.65269}
{"mode": "val", "epoch": 22, "iter": 312, "lr": 0.0005, "bbox_mAP": 0.796, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.955, "bbox_mAP_s": 0.632, "bbox_mAP_m": 0.876, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.796 0.978 0.955 0.632 0.876 -1.000"}
{"mode": "val", "epoch": 22, "iter": 63, "lr": 0.0005, "memory": 10573, "data_time": 1.32065, "loss_rpn_cls": 0.00856, "loss_rpn_bbox": 0.0367, "loss_cls": 0.05549, "acc": 97.88752, "loss_bbox": 0.12341, "loss_mask": 0.10412, "loss": 0.32828, "time": 1.72474}
{"mode": "train", "epoch": 23, "iter": 100, "lr": 5e-05, "memory": 10573, "data_time": 0.75742, "loss_rpn_cls": 0.00278, "loss_rpn_bbox": 0.03207, "loss_cls": 0.03902, "acc": 98.52383, "loss_bbox": 0.10592, "loss_mask": 0.09755, "loss": 0.27734, "time": 1.59267}
{"mode": "val", "epoch": 23, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.798, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.634, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.798 0.978 0.954 0.634 0.877 -1.000"}
{"mode": "val", "epoch": 23, "iter": 63, "lr": 5e-05, "memory": 10573, "data_time": 1.3253, "loss_rpn_cls": 0.00822, "loss_rpn_bbox": 0.03641, "loss_cls": 0.05566, "acc": 97.87636, "loss_bbox": 0.12314, "loss_mask": 0.10403, "loss": 0.32747, "time": 1.72917}
{"mode": "train", "epoch": 24, "iter": 100, "lr": 5e-05, "memory": 10573, "data_time": 0.81898, "loss_rpn_cls": 0.00295, "loss_rpn_bbox": 0.0319, "loss_cls": 0.03764, "acc": 98.56914, "loss_bbox": 0.10278, "loss_mask": 0.09684, "loss": 0.27211, "time": 1.65654}
{"mode": "val", "epoch": 24, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.797, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.955, "bbox_mAP_s": 0.63, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.797 0.978 0.955 0.630 0.877 -1.000"}
{"mode": "val", "epoch": 24, "iter": 63, "lr": 5e-05, "memory": 10573, "data_time": 1.31768, "loss_rpn_cls": 0.00874, "loss_rpn_bbox": 0.03627, "loss_cls": 0.05603, "acc": 97.88752, "loss_bbox": 0.1221, "loss_mask": 0.10373, "loss": 0.32687, "time": 1.72164}
{"mode": "train", "epoch": 25, "iter": 100, "lr": 5e-05, "memory": 10573, "data_time": 0.85408, "loss_rpn_cls": 0.00322, "loss_rpn_bbox": 0.0324, "loss_cls": 0.03684, "acc": 98.62891, "loss_bbox": 0.10428, "loss_mask": 0.0977, "loss": 0.27443, "time": 1.69443}
{"mode": "val", "epoch": 25, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.797, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.955, "bbox_mAP_s": 0.632, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.797 0.978 0.955 0.632 0.877 -1.000"}
{"mode": "val", "epoch": 25, "iter": 63, "lr": 5e-05, "memory": 10573, "data_time": 1.33072, "loss_rpn_cls": 0.00817, "loss_rpn_bbox": 0.03632, "loss_cls": 0.0557, "acc": 97.88628, "loss_bbox": 0.12198, "loss_mask": 0.10321, "loss": 0.32537, "time": 1.73382}
{"mode": "train", "epoch": 26, "iter": 100, "lr": 5e-05, "memory": 10573, "data_time": 0.80237, "loss_rpn_cls": 0.00258, "loss_rpn_bbox": 0.03243, "loss_cls": 0.0382, "acc": 98.57188, "loss_bbox": 0.10498, "loss_mask": 0.0983, "loss": 0.27648, "time": 1.63908}
{"mode": "val", "epoch": 26, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.797, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.955, "bbox_mAP_s": 0.632, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.797 0.978 0.955 0.632 0.877 -1.000"}
{"mode": "val", "epoch": 26, "iter": 63, "lr": 5e-05, "memory": 10573, "data_time": 1.32882, "loss_rpn_cls": 0.00831, "loss_rpn_bbox": 0.03646, "loss_cls": 0.05576, "acc": 97.88938, "loss_bbox": 0.12262, "loss_mask": 0.10363, "loss": 0.32678, "time": 1.73173}
{"mode": "train", "epoch": 27, "iter": 100, "lr": 5e-05, "memory": 10573, "data_time": 0.78806, "loss_rpn_cls": 0.00231, "loss_rpn_bbox": 0.03192, "loss_cls": 0.03795, "acc": 98.55742, "loss_bbox": 0.10297, "loss_mask": 0.09571, "loss": 0.27086, "time": 1.62487}
{"mode": "val", "epoch": 27, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.797, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.954, "bbox_mAP_s": 0.632, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.797 0.978 0.954 0.632 0.877 -1.000"}
{"mode": "val", "epoch": 27, "iter": 63, "lr": 5e-05, "memory": 10573, "data_time": 1.34767, "loss_rpn_cls": 0.0083, "loss_rpn_bbox": 0.03672, "loss_cls": 0.0541, "acc": 97.96007, "loss_bbox": 0.12248, "loss_mask": 0.10406, "loss": 0.32567, "time": 1.75013}
{"mode": "train", "epoch": 28, "iter": 100, "lr": 5e-05, "memory": 10573, "data_time": 0.84148, "loss_rpn_cls": 0.00276, "loss_rpn_bbox": 0.03218, "loss_cls": 0.03863, "acc": 98.53594, "loss_bbox": 0.10327, "loss_mask": 0.09634, "loss": 0.27318, "time": 1.67973}
{"mode": "val", "epoch": 28, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.798, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.955, "bbox_mAP_s": 0.632, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.798 0.978 0.955 0.632 0.877 -1.000"}
{"mode": "val", "epoch": 28, "iter": 63, "lr": 5e-05, "memory": 10573, "data_time": 1.32834, "loss_rpn_cls": 0.0082, "loss_rpn_bbox": 0.03668, "loss_cls": 0.05611, "acc": 97.86272, "loss_bbox": 0.12355, "loss_mask": 0.10421, "loss": 0.32876, "time": 1.73352}
{"mode": "train", "epoch": 29, "iter": 100, "lr": 5e-05, "memory": 10573, "data_time": 0.84436, "loss_rpn_cls": 0.00289, "loss_rpn_bbox": 0.03264, "loss_cls": 0.03705, "acc": 98.62578, "loss_bbox": 0.10419, "loss_mask": 0.09779, "loss": 0.27456, "time": 1.68476}
{"mode": "val", "epoch": 29, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.796, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.955, "bbox_mAP_s": 0.634, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.796 0.978 0.955 0.634 0.877 -1.000"}
{"mode": "val", "epoch": 29, "iter": 63, "lr": 5e-05, "memory": 10573, "data_time": 1.32765, "loss_rpn_cls": 0.00842, "loss_rpn_bbox": 0.0365, "loss_cls": 0.0557, "acc": 97.89249, "loss_bbox": 0.12348, "loss_mask": 0.10309, "loss": 0.32719, "time": 1.7306}
{"mode": "train", "epoch": 30, "iter": 100, "lr": 5e-05, "memory": 10573, "data_time": 0.85133, "loss_rpn_cls": 0.00284, "loss_rpn_bbox": 0.03219, "loss_cls": 0.03848, "acc": 98.55, "loss_bbox": 0.10381, "loss_mask": 0.09742, "loss": 0.27474, "time": 1.6893}
{"mode": "val", "epoch": 30, "iter": 312, "lr": 5e-05, "bbox_mAP": 0.798, "bbox_mAP_50": 0.978, "bbox_mAP_75": 0.955, "bbox_mAP_s": 0.632, "bbox_mAP_m": 0.877, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.798 0.978 0.955 0.632 0.877 -1.000"}
{"mode": "val", "epoch": 30, "iter": 63, "lr": 5e-05, "memory": 10573, "data_time": 1.33462, "loss_rpn_cls": 0.00838, "loss_rpn_bbox": 0.03676, "loss_cls": 0.05626, "acc": 97.87698, "loss_bbox": 0.12385, "loss_mask": 0.10327, "loss": 0.32852, "time": 1.73904}
